{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-RKO6BLKO.js","../src/common/middleware/requestLogger.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACA;ACJA,gCAA2B;AAG3B,oDAA6C;AAE7C,qCAAiE;AAqBjE,IAAM,cAAA,EAAgB,CAAC,OAAA,EAAA,GAAwC;AAC7D,EAAA,MAAM,YAAA,EAAuB;AAAA,IAC3B,OAAA,EAAS,oBAAA,CAAI,YAAA;AAAA,IACb,WAAA;AAAA,IACA,MAAA,EAAQ,CAAC,CAAA;AAAA,IACT,QAAA;AAAA,IACA,cAAA;AAAA,IACA,oBAAA;AAAA,IACA,qBAAA,EAAuB,CAAC,GAAA,EAAA,GAAQ,CAAA,kBAAA,EAAqB,GAAA,CAAI,MAAM,CAAA,CAAA;AAC5B,IAAA;AACnC,IAAA;AACG,IAAA;AACL,EAAA;AACqD,EAAA;AACvD;AAEiD;AAC1C,EAAA;AACA,EAAA;AACA,EAAA;AACS,EAAA;AAChB;AAEuE;AAC5D,EAAA;AACC,EAAA;AACQ,EAAA;AACO,EAAA;AAC3B;AAEoE;AACrC,EAAA;AACR,EAAA;AACM,IAAA;AACD,IAAA;AACI,MAAA;AACf,MAAA;AAC0B,MAAA;AACvC,IAAA;AACF,EAAA;AACK,EAAA;AACP;AAEsH;AACpD,EAAA;AACV,EAAA;AACK,EAAA;AACpD,EAAA;AACT;AAE6F;AACtC,EAAA;AACjC,EAAA;AACtB;AAEiF;AACxB,EAAA;AAChC,EAAA;AACD,EAAA;AACU,EAAA;AACzB,EAAA;AACT;AAE6B;ADxBuC;AACA;AACA;AACA","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-RKO6BLKO.js","sourcesContent":[null,"import { randomUUID } from \"node:crypto\";\nimport type { IncomingMessage, ServerResponse } from \"node:http\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { StatusCodes, getReasonPhrase } from \"http-status-codes\";\nimport type { LevelWithSilent } from \"pino\";\nimport { type CustomAttributeKeys, type Options, pinoHttp } from \"pino-http\";\n\nimport { env } from \"@/common/config/env\";\n\nenum LogLevel {\n  Fatal = \"fatal\",\n  Error = \"error\",\n  Warn = \"warn\",\n  Info = \"info\",\n  Debug = \"debug\",\n  Trace = \"trace\",\n  Silent = \"silent\",\n}\n\ntype PinoCustomProps = {\n  request: Request;\n  response: Response;\n  error: Error;\n  responseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n  const pinoOptions: Options = {\n    enabled: env.isProduction,\n    customProps: customProps as unknown as Options[\"customProps\"],\n    redact: [],\n    genReqId,\n    customLogLevel,\n    customSuccessMessage,\n    customReceivedMessage: (req) => `request received: ${req.method}`,\n    customErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n    customAttributeKeys,\n    ...options,\n  };\n  return [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n  req: \"request\",\n  res: \"response\",\n  err: \"error\",\n  responseTime: \"timeTaken\",\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n  request: req,\n  response: res,\n  error: res.locals.err,\n  responseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n  const isNotProduction = !env.isProduction;\n  if (isNotProduction) {\n    const originalSend = res.send;\n    res.send = (content) => {\n      res.locals.responseBody = content;\n      res.send = originalSend;\n      return originalSend.call(res, content);\n    };\n  }\n  next();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n  if (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n  if (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n  if (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n  return LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  if (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n  return `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  const existingID = req.id ?? req.headers[\"x-request-id\"];\n  if (existingID) return existingID;\n  const id = randomUUID();\n  res.setHeader(\"X-Request-Id\", id);\n  return id;\n};\n\nexport default requestLogger();\n"]}