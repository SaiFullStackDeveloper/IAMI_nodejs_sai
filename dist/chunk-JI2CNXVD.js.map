{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-JI2CNXVD.js","../src/common/models/mongoDB/quote.ts"],"names":[],"mappings":"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","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-JI2CNXVD.js","sourcesContent":[null,"import { UserSessionTypes } from '@/common/types/user'\nimport { Schema, model } from 'mongoose'\n\n// Schemas\n\nconst createQuoteDebugSchema = new Schema(\n    {}, { strict: false }\n)\n\nconst policiesSchema = new Schema(\n    {}, { strict: false }\n)\n\nconst createQuoteResponseDebugSchema = new Schema(\n    {}, { strict: false }\n)\n\nconst periodPaymentSchema = new Schema(\n    {}, { strict: false }\n)\n\n// Models\n\nconst createQuoteDebugModel = model('CreateQuote-Debug', createQuoteDebugSchema)\nconst createQuoteResponseDebugModel = model('CreateResponseQuote-Debug', createQuoteResponseDebugSchema)\nexport const policiesModel = model('Policies', policiesSchema)\nconst periodPaymentModel = model('PeriodPayment', periodPaymentSchema)\n\n// Function \n\nexport const createQuoteDebug = async (data: Object) => {\n    return await createQuoteDebugModel.create(data)\n}\n\nexport const createQuoteResponseDebugModelQuote = async (data: Object) => {\n    const createdQuote = await createQuoteResponseDebugModel.create(data)\n    return createdQuote._id\n}\n\nexport const policies = async (data: Object) => {\n    const createdQuote = await policiesModel.create(data)\n    return createdQuote._id\n}\n\nexport const policiesGet = async (id: string, email: string) => {\n    return await policiesModel.findOne({ _id: id, \"meta.email\": email }) as {\n        _id: string,\n        meta: Object,\n        data: Object,\n        status: Object\n    };\n}\n\nexport const policiesDelete = async (id: string, email: string) => {\n    return await policiesModel.deleteOne({ _id: id, \"meta.email\": email })\n}\n\nexport const policiesUpdateCreateQuote = async (id: string, data: {\n    data: Object,\n    status: Object[]\n}) => {\n    const { \"form-id\": _, ...filteredData } = data.data as any;\n\n    return await policiesModel.updateOne({ _id: id }, {\n        $set: {\n            \"data\": filteredData,\n            \"status\": data.status,\n            \"meta.createdAt\": new Date()\n        }\n    })\n}\n\nexport const policiesUpdateBlockQuote = async (id: string, summary: Object, blockquote: Object, status: Object[]) => {\n    return await policiesModel.updateOne({ _id: id }, {\n        $set: {\n            \"data.premium-summary\": summary,\n            \"data.block-quote\": blockquote,\n            \"status\": status\n        }\n    })\n}\n\nexport const policiesUpdateFullQuote = async (id: string, quote: Object) => {\n    return await policiesModel.updateOne({ _id: id }, {\n        $set: {\n            \"data.quote-summary\": quote,\n            \"status.3.status\": \"completed\",\n            \"payment\": true,\n        }\n    })\n}\n\nexport const quotedData = async (page: number, limit: number = 10, query: Object) => {\n\n    const skip = (page - 1) * limit;\n\n    return await policiesModel.find(query, {\n        \"CreatedAt\": \"$meta.createdAt\",\n        \"BusinessName\": \"$data.create-quote.BusinessName\",\n        \"EffectiveDate\": \"$data.create-quote.EffectiveDate\",\n        \"QuoteNo\": \"$data.create-quote.CarrierQuoteNumber\",\n        \"ReferenceNo\": \"$data.create-quote.CarrierReferenceNumber\",\n        \"TransactionType\": {\n            $cond: {\n                if: { $eq: [\"$data.create-quote.IsRenewable\", \"Y\"] },\n                then: \"Renewal\",\n                else: \"New Business\"\n            }\n        },\n        \"PolicyStatus\": {\n            $cond: {\n                if: { $eq: [\"$data.create-quote.PolicyStatus\", 1] },\n                then: \"Not Issued\",\n                else: {\n                    $cond: {\n                        if: { $eq: [\"$data.create-quote.PolicyStatus\", 2] },\n                        then: \"Issued\",\n                        else: \"Cancelled\"\n                    }\n                }\n            }\n        },\n        \"Coverages\": \"$data.coverage-selection.Coverages\",\n    }).sort({ \"meta.createdAt\": -1 }).skip(skip).limit(limit);\n\n}\n\nexport const blockedData = async (page: number, limit: number = 10, query: Object) => {\n\n    const skip = (page - 1) * limit;\n\n    return await policiesModel.find(query, {\n        \"CreatedAt\": \"$meta.createdAt\",\n        \"BusinessName\": \"$data.block-quote.BusinessName\",\n        \"EffectiveDate\": \"$data.block-quote.EffectiveDate\",\n        \"QuoteNo\": \"$data.block-quote.CarrierQuoteNumber\",\n        \"ReferenceNo\": \"$data.block-quote.CarrierReferenceNumber\",\n        \"TransactionType\": {\n            $cond: {\n                if: { $eq: [\"$data.block-quote.IsRenewable\", \"Y\"] },\n                then: \"Renewal\",\n                else: \"New Business\"\n            }\n        },\n        \"PolicyStatus\": {\n            $cond: {\n                if: { $eq: [\"$data.block-quote.PolicyStatus\", 1] },\n                then: \"Not Issued\",\n                else: {\n                    $cond: {\n                        if: { $eq: [\"$data.block-quote.PolicyStatus\", 2] },\n                        then: \"Issued\",\n                        else: \"Cancelled\"\n                    }\n                }\n            }\n        },\n        \"Coverages\": \"$data.coverage-selection.Coverages\",\n        \"ProposalNo\": \"$data.block-quote.ProposalNo\",\n    }).sort({ \"meta.createdAt\": -1 }).skip(skip).limit(limit);\n\n}\n\nexport const issuedData = async (page: number, limit: number = 10, query: Object) => {\n\n\n\n    const skip = (page - 1) * limit;\n\n    return await policiesModel.find(query, {\n        \"CreatedAt\": \"$meta.createdAt\",\n        \"BusinessName\": \"$data.quote-summary.BusinessName\",\n        \"EffectiveDate\": \"$data.quote-summary.EffectiveDate\",\n        \"ExpiryDate\": \"$data.quote-summary.ExpiryDate\",\n        \"ReferenceNo\": \"$data.quote-summary.CarrierReferenceNumber\",\n        \"TransactionType\": {\n            $cond: {\n                if: { $eq: [\"$data.quote-summary.IsRenewable\", \"Y\"] },\n                then: \"Renewal\",\n                else: \"New Business\"\n            }\n        },\n        \"PolicyStatus\": {\n            $cond: {\n                if: { $eq: [\"$data.quote-summary.PolicyStatus\", 1] },\n                then: \"Not Issued\",\n                else: {\n                    $cond: {\n                        if: { $eq: [\"$data.quote-summary.PolicyStatus\", 2] },\n                        then: \"Issued\",\n                        else: \"Cancelled\"\n                    }\n                }\n            }\n        },\n        \"Coverages\": \"$data.coverage-selection.Coverages\",\n        \"PolicyNo\": \"$data.quote-summary.PolicyNo\",\n        \"NetPremium\": \"$data.quote-summary.DuePremium\",\n        \"NetCommission\": {\n            $add: [\n                { $ifNull: [{ $toDouble: \"$data.quote-summary.BrokerFee\" }, 0] },\n                { $ifNull: [{ $toDouble: \"$data.quote-summary.GSTBrokerFee\" }, 0] }\n            ]\n        },\n    }).sort({ \"meta.createdAt\": -1 }).skip(skip).limit(limit);\n\n}\n\n\nexport const periodPayment = async (data: Object) => {\n    const createdQuote = await periodPaymentModel.create(data)\n    return createdQuote._id\n}\n\n\n// ...existing code...\n\nexport const filterPoliciesQuery = async (\n    queryObject: Object,\n    type: \"quoted\" | \"blocked\" | \"issued\",\n    filters: {\n        name?: string,\n        num?: string,\n        effectiveAt?: string,\n        createdAt?: string,\n    } = {}\n) => {\n\n    const query: any = queryObject;\n\n    if (type === 'quoted') {\n\n        if (filters.name) {\n            query[\"data.create-quote.BusinessName\"] = {\n                $regex: filters.name,\n                $options: 'i'\n            };\n        }\n\n        if (filters.num) {\n            query[\"data.create-quote.CarrierQuoteNumber\"] = {\n                $regex: filters.num,\n                $options: 'i'\n            };\n        }\n\n        if (filters.effectiveAt) {\n\n            query[\"data.create-quote.EffectiveDate\"] = {\n                $eq: filters.effectiveAt,\n            };\n\n        }\n\n    }\n\n\n    if (type === 'blocked') {\n\n        if (filters.name) {\n            query[\"data.block-quote.BusinessName\"] = {\n                $regex: filters.name,\n                $options: 'i'\n            };\n        }\n\n        if (filters.num) {\n            query[\"data.block-quote.CarrierQuoteNumber\"] = {\n                $regex: filters.num,\n                $options: 'i'\n            };\n        }\n\n        if (filters.effectiveAt) {\n\n            query[\"data.block-quote.EffectiveDate\"] = {\n                $eq: filters.effectiveAt,\n            };\n\n        }\n\n    }\n\n\n    if (type === 'issued') {\n\n        if (filters.name) {\n            query[\"data.quote-summary.BusinessName\"] = {\n                $regex: filters.name,\n                $options: 'i'\n            };\n        }\n\n        if (filters.num) {\n            query[\"data.quote-summary.PolicyNo\"] = {\n                $regex: filters.num,\n                $options: 'i'\n            };\n        }\n\n        if (filters.effectiveAt) {\n\n            query[\"data.quote-summary.EffectiveDate\"] = {\n                $eq: filters.effectiveAt,\n            };\n\n        }\n\n    }\n\n\n\n    if (filters.createdAt) {\n\n        // Get the start of the day in UTC\n        const startDate = new Date(filters.createdAt);\n        startDate.setUTCHours(0, 0, 0, 0);\n\n        // Get the start of the next day in UTC\n        const endDate = new Date(startDate);\n        endDate.setUTCDate(endDate.getUTCDate() + 1);\n\n        // Use range query with $gte and $lt (not $lte)\n        query[\"meta.createdAt\"] = {\n            $gte: startDate,\n            $lt: endDate\n        };\n\n    }\n\n    return query;\n\n}"]}