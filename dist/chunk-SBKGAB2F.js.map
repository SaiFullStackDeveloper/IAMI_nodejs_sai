{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-SBKGAB2F.js","../src/api/auth/verification/signupVerificationRouter.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;AChBA,oFAAkE;AAU3D,IAAM,yBAAA,EAAmC,iBAAA,CAAQ,MAAA,CAAO,CAAA;AAG/D,wBAAA,CAAyB,GAAA,CAAI,gBAAA,EAAkB,MAAA,CAAO,GAAA,EAAc,GAAA,EAAA,GAAkB;AAElF,EAAA,MAAM,EAAE,gBAAgB,EAAA,EAAI,oBAAA;AAC5B,EAAA,MAAM,EAAE,KAAA,EAAO,MAAM,EAAA,EAAI,GAAA,CAAI,MAAA;AAC7B,EAAA,MAAM,UAAA,EAAY,CAAA,OAAA,EAAU,KAAK,CAAA,CAAA;AACC,EAAA;AAEpB,EAAA;AACqB,IAAA;AAET,IAAA;AACC,MAAA;AAC3B,IAAA;AAEiB,IAAA;AACM,MAAA;AACD,MAAA;AACC,MAAA;AACD,MAAA;AACG,MAAA;AACJ,MAAA;AACA,MAAA;AACK,MAAA;AACM,MAAA;AAC/B,IAAA;AAE+B,IAAA;AACD,IAAA;AAG1B,EAAA;AAC2B,IAAA;AAEhC,EAAA;AAEuB,EAAA;AACb,IAAA;AACT,EAAA;AAEY,EAAA;AAEhB;ADJmC;AACA;AACA;AACA","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-SBKGAB2F.js","sourcesContent":[null,"import express, { type Request, type Response, type Router } from \"express\";\nimport { userSignupRedisRepository } from \"@/common/models/redis/user\";\nimport { env } from \"@/common/config/env\";\nimport { createUser } from \"@/common/models/mongoDB/user\";\nimport { UserSignupTypes } from \"@/common/types/user\";\nimport { emailHtml } from \"@/common/config/email\";\nimport { redis } from \"@/common/config/redis\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport const signupVerificationRouter: Router = express.Router();\n\n\nsignupVerificationRouter.get(\"/:token/:email\", async (req: Request, res: Response) => {\n\n    const { FRONTEND_DOMAIN } = env\n    const { email, token } = req.params;\n    const signupKey = `Signup:${email}`;\n    const userExist = await redis.get(signupKey);\n    \n    if(userExist) {\n        const isUserExist = JSON.parse(userExist); \n\n    if (isUserExist.email !== email || isUserExist.token !== token) {\n        return res.redirect(`${FRONTEND_DOMAIN}/auth/login`);\n    }\n\n    await createUser({\n        email: isUserExist.email,\n        name: isUserExist.name,\n        phone: isUserExist.phone,\n        role: isUserExist.role,\n        address: isUserExist.address,\n        ABN: isUserExist.ABN,\n        isEmailVerified: true,\n        password: isUserExist.password,\n        isUserVerified: isUserExist.role === 'Agent' ? false : true,\n    })\n\n    await userSignupRedisRepository.remove(email);\n    await redis.del(`Stats:Users:${isUserExist.role}`);\n\n    }\n    else {\n        return res.status(502).send(\"Please, try again signup, Token is expired\"); // âœ… Return to avoid further execution\n\n    }\n\n    const data = emailHtml('auth/signup/verification-complete.hbs', {\n        link: FRONTEND_DOMAIN\n    })\n\n    res.send(data)\n\n});\n"]}