{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-RHY4WX2A.js","../src/common/middleware/internalHandler.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;ACHA,oDAA4B;AAIrB,IAAM,mBAAA,EAAqB,MAAA,CAAO,GAAA,EAAc,GAAA,EAAe,IAAA,EAAA,GAAuB;AAEzF,EAAA,MAAM,KAAA,EAAO,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,OAAA,CAAQ,kBAAkB,CAAW,CAAA;AACjE,EAAA,GAAA,CAAI,CAAC,CAAC,YAAA,EAAc,OAAO,CAAA,CAAE,QAAA,CAAS,IAAA,CAAK,IAAI,CAAA,EAAG;AAC9C,IAAA,OAAO,oDAAA,gCAAsB,CAAgB,OAAA;AAAA,MACzC,cAAA;AAAA,MACA,IAAA;AAAA,MACA,4BAAA,CAAY;AAAA,IAChB,CAAA,EAAG,GAAG,CAAA;AAAA,EACV;AACA,EAAA,IAAA,CAAK,CAAA;AAET,CAAA;ADAA;AACA;AACE;AACF,gDAAC","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-RHY4WX2A.js","sourcesContent":[null,"import { type Router, Request, Response, NextFunction } from \"express\";\nimport { userSessionRedisRepository } from \"../models/redis/user\";\nimport { handleServiceResponse } from \"../utils/httpHandlers\";\nimport { ServiceResponse } from \"../models/serviceResponse\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { UserSessionTypes } from \"../types/user\";\n\n// Authentication middleware\nexport const InternalMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n\n    const user = JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes;\n    if (!['SuperAdmin', 'Admin'].includes(user.role)) {\n        return handleServiceResponse(ServiceResponse.failure(\n            \"Unauthorized\",\n            null,\n            StatusCodes.UNAUTHORIZED\n        ), res)\n    }\n    next()\n\n};"]}