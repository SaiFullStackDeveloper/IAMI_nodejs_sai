{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-JDA4FSDT.js","../src/common/models/mongoDB/user.ts"],"names":[],"mappings":"AAAA;ACCA,oCAA8B;AAE9B,IAAM,WAAA,EAAa,IAAI,qBAAA;AAAA,EACnB;AAAA,IACI,KAAA,EAAO;AAAA,MACH,IAAA,EAAM,MAAA;AAAA,MACN,MAAA,EAAQ;AAAA,IACZ,CAAA;AAAA,IACA,MAAA,EAAQ;AAAA,MACJ,IAAA,EAAM,MAAA;AAAA,MACN,MAAA,EAAQ,IAAA;AAAA,MACR,QAAA,EAAU;AAAA,IACd,CAAA;AAAA,IACA,IAAA,EAAM,MAAA;AAAA,IACN,KAAA,EAAO,MAAA;AAAA,IACP,IAAA,EAAM,MAAA;AAAA,IACN,OAAA,EAAS,MAAA;AAAA,IACT,GAAA,EAAK,MAAA;AAAA,IACL,QAAA,EAAU,MAAA;AAAA,IACV,eAAA,EAAiB,OAAA;AAAA,IACjB,cAAA,EAAgB,OAAA;AAAA,IAChB,QAAA,EAAU,EAAE,IAAA,EAAM,OAAA,EAAS,OAAA,EAAS,MAAM,CAAA;AAAA,IAC1C,SAAA,EAAW,EAAE,IAAA,EAAM,IAAA,EAAM,OAAA,EAAS,IAAA,CAAK,IAAI;AAAA,EAC/C;AACJ,CAAA;AAEO,IAAM,UAAA,EAAY,6BAAA,MAAM,EAAQ,UAAU,CAAA;AAE1C,IAAM,SAAA,EAAW,MAAA,CAAO,KAAA,EAAA,GAAkB;AAC7C,EAAA,OAAO,MAAM,SAAA,CAAU,OAAA,CAAQ;AAAA,IAC3B;AAAA,EACJ,CAAC,CAAA;AACL,CAAA;AAEO,IAAM,YAAA,EAAc,MAAA,CAAO,KAAA,EAAA,GAAkB;AAChD,EAAA,MAAM,KAAA,EAAO,MAAM,SAAA,CAAU,OAAA,CAAQ,EAAE,KAAA,EAAO,IAAA,EAAM,EAAE,GAAA,EAAK,CAAC,MAAA,EAAQ,OAAO,EAAE,EAAE,CAAA,EAAG,MAAM,CAAA;AACxF,EAAA,OAAO,KAAA,EAAO,KAAA,EAAO,IAAA;AACzB,CAAA;AAEA,MAAA,SAAsB,kBAAA,CAAmB,KAAA,EAAe,WAAA,EAAqB;AACzE,EAAA,MAAM,SAAA,CAAU,SAAA;AAAA,IACZ,EAAE,MAAa,CAAA;AAAA,IACf,EAAE,IAAA,EAAM,EAAE,QAAA,EAAU,YAAY,EAAE;AAAA,EACtC,CAAA;AACJ;AAEO,IAAM,WAAA,EAAa,MAAA,CAAO,IAAA,EAAA,GAAuE;AAEpG,EAAA,MAAM,UAAA,EAAY,MAAM,SAAA,CAAU,cAAA,CAAe,EAAE,MAAA,EAAQ,EAAE,MAAA,EAAQ,QAAQ,EAAE,CAAC,CAAA;AAChF,EAAA,IAAI,UAAA,EAAY,UAAA,EAAY,CAAA;AAC5B,EAAA,IAAI,YAAA,EAAc,IAAA;AAClB,EAAA,IAAI,MAAA,EAAQ,CAAA;AAEZ,EAAA,MAAA,CAAO,YAAA,GAAe,MAAA,EAAQ,EAAA,EAAI;AAC9B,IAAA,IAAI;AACA,MAAA,MAAM,GAAA,EAAK,IAAA,CAAK,eAAA,EAAiB,CAAA,IAAA,EAAO,MAAA,CAAO,SAAS,CAAA,CAAE,QAAA,CAAS,CAAA,EAAG,GAAG,CAAC,CAAA,EAAA;AAC5D,MAAA;AACgB,MAAA;AACvB,QAAA;AACK,QAAA;AACX,MAAA;AACW,IAAA;AACoC,MAAA;AAC9B,QAAA;AACD,QAAA;AACjB,MAAA;AACS,MAAA;AACb,IAAA;AACJ,EAAA;AACJ;AAEmH;AACrF,EAAA;AACc,EAAA;AACgC,EAAA;AAEjE,EAAA;AAEX;AAEgH;AACpE,EAAA;AACwC,EAAA;AACzE,EAAA;AACX;AAEuE;AACzC,EAAA;AAKf,EAAA;AAGJ,EAAA;AACX;ADlBiF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-JDA4FSDT.js","sourcesContent":[null,"import { UserRolesTypes, UserSessionTypes, UserTypes } from '@/common/types/user'\nimport { Schema, model } from 'mongoose'\n\nconst userSchema = new Schema(\n    {\n        email: {\n            type: String,\n            unique: true\n        },\n        userId: {\n            type: String,\n            unique: true,\n            required: false\n        },\n        name: String,\n        phone: String,\n        role: String,\n        address: String,\n        ABN: String,\n        password: String,\n        isEmailVerified: Boolean,\n        isUserVerified: Boolean,\n        disabled: { type: Boolean, default: false },\n        createdAt: { type: Date, default: Date.now }\n    }\n)\n\nexport const userModel = model('User', userSchema)\n\nexport const findUser = async (email: string) => {\n    return await userModel.findOne({\n        email\n    }) as UserTypes & { __v: number } | undefined\n}\n\nexport const isUserExist = async (email: string) => {\n    const user = await userModel.findOne({ email, role: { $in: ['User', 'Agent'] } }, 'name');\n    return user ? user : null;\n}\n\nexport async function updateUserPassword(email: string, newPassword: string) {\n    await userModel.updateOne(\n        { email: email },\n        { $set: { password: newPassword } }\n    );\n}\n\nexport const createUser = async (data: Omit<UserTypes, 'createdAt' | '_id' | 'userId' | 'disabled'>) => {\n\n    const userCount = await userModel.countDocuments({ userId: { $regex: /^IAMI/ } });\n    let newUserId = userCount + 1;\n    let userExisted = true\n    let retry = 0\n\n    while (userExisted && retry < 20) {\n        try {\n            const id = data.isUserVerified ? `IAMI${String(newUserId).padStart(4, '0')}` : `Agent${String(newUserId)}`;\n            userExisted = false\n            return await userModel.create({\n                ...data,\n                userId: id\n            })\n        } catch (error) {\n            if ((error as { code: number }).code === 11000) {\n                userExisted = true\n                newUserId += 1\n            }\n            retry += 1\n        }\n    }\n}\n\nexport const getUserByRole = async (role: Omit<UserRolesTypes, 'SuperAdmin'>, page: number, limit: number = 10) => {\n    const skip = (page - 1) * limit;\n    const excludeField = role !== 'Agent' ? '-password -role -isEmailVerified -isUserVerified -__v -_id' : '-password -role -isEmailVerified -__v -_id';\n    const users = await userModel.find({ role: role }, excludeField).sort({ isUserVerified: 1, createdAt: -1 }).skip(skip).limit(limit);\n\n    return users;\n\n}\n\nexport const getUserByRoleFilterUsingEmail = async (role: Omit<UserRolesTypes, 'SuperAdmin'>, email: string) => {\n    const excludeField = role !== 'Agent' ? '-password -role -isEmailVerified -isUserVerified -__v -_id' : '-password -role -isEmailVerified -__v -_id';\n    const users = await userModel.findOne({ role: role, email: email }, excludeField);\n    return users;\n}\n\nexport const getAllUsers = async (page: number, limit: number = 10) => {\n    const skip = (page - 1) * limit;\n\n    // Fetch all users (with roles \"User\", \"Agent\", \"Employee\") and exclude sensitive fields.\n    const users = await userModel.find({}, '-password -__v -_id')\n        .skip(skip)\n        .limit(limit)\n        .sort({ createdAt: -1 });  // Sorting by created date in descending order\n\n    return users;\n}"]}