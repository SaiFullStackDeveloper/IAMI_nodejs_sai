{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-L6X3WCB6.js","../src/api/v1/forms/insurance/insuranceModel.ts"],"names":[],"mappings":"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","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-L6X3WCB6.js","sourcesContent":[null,"import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { z } from \"zod\";\nimport { AMOUNT, CATEGORY_OPTIONS, CLAIMS_BOOLEAN, CLAIMS_IN_LAST_FIVE_YEARS, CLAIMS_IN_LAST_FIVE_YEARS_LI, COVER, COVERAGES, FLOOR, FLOOR_CONSTRUCTION, FORMTYPES, INDEMNITY_PERIOD, LOCATION_TYPE, ROOF_CONSTRUCTION, SUMEXCESS, SUMLIABILITY, TAXAUDITCOVER, THEFT_MONEY_AND_GLASS, THEFT_SECURITY, THEFT_SECURITY_EXTRA, TYPE_OF_BUSINESS, TYPE_OF_GLASS, TYPE_OF_PLATE, WALL_CONSTRUCTION } from \"./insuranceStaticData\";\n\nextendZodWithOpenApi(z);\n\n\n\nconst ManualAddress = z.object({\n    streetNumber: z\n        .string({\n            message: \"Street Number is required\",\n        })\n        .nonempty({\n            message: \"Street Number is required\",\n        }),\n    streetName: z\n        .string({\n            message: \"Street Name is required\",\n        }),\n    // .nonempty({\n    //   message: \"Street Name is required\",\n    // }),\n    streetType: z\n        .string({\n            message: \"Street Type is required\",\n        }),\n    // .nonempty({\n    //   message: \"Street Type is required\",\n    // }),\n    town: z\n        .string({\n            message: \"Town/Suburb is required\",\n        })\n        .nonempty({\n            message: \"Town/Suburb is required\",\n        }),\n    state: z\n        .string({\n            message: \"State/Territory is required\",\n        })\n        .nonempty({\n            message: \"State/Territory is required\",\n        }),\n    postCode: z\n        .string({\n            message: \"Post Code is required\",\n        })\n        .nonempty({\n            message: \"Post Code is required\",\n        }),\n});\n\n\nexport const CoverageSelectionFormSchema = z.object({\n    ABN: z.string().optional(),\n    EffectiveDate: z.string(),\n    ExpiryDate: z.string(),\n    BusinessName: z.string().nonempty({\n        message: \"Bussiness Name is required\",\n    }),\n    BusinessDescription: z.string().nonempty({\n        message: \"Business Description is required\",\n    }),\n    ANZSICCode: z.string().nonempty({\n        message: \"ANZSIC Code is required\",\n    }),\n    streetAddress: z.string().nonempty({\n        message: \"Street Address is required\",\n    }),\n    isManual: z.boolean().default(false).optional(),\n\n    address: ManualAddress.optional(),\n    AnnualTurnover: z\n        .string()\n        .nonempty({\n            message: \"Annual Turnover is required\",\n        })\n        .min(1, {\n            message: \"Annual Turnover must be greater than 0\",\n        }),\n    NumberOfEmployees: z\n        .string({\n            message: \"Number Of Employees is required\",\n        })\n        .min(1, {\n            message: \"Number of Employees must be greater than 0\",\n        }),\n    YearStarted: z\n        .string()\n        .min(4, {\n            message: \"Year Started is required\",\n        })\n        .max(4, {\n            message: \"Year Started must be 4 digits\",\n        }),\n    LocationType: z.enum(LOCATION_TYPE, {\n        message: \"Location Type is required\",\n    }),\n    TypeOfBusiness: z.enum(TYPE_OF_BUSINESS, {\n        message: \"Type Of Business is required\",\n    }),\n    Coverages: z.array(z.enum(COVERAGES), {\n        message: \"Coverages is required\",\n    }),\n\n}).strict({\n    message: \"Invalid Form Content\",\n})\n\nexport const PropertyDetailsFormSchema = z.object({\n    YearBuilt: z\n        .string()\n        .min(4, {\n            message: \"Year Built is required\",\n        })\n        .max(4, {\n            message: \"Year Built must be 4 digits\",\n        })\n        .refine(\n            (value) => {\n                const currentYear = new Date().getFullYear();\n                return Number(value) <= currentYear;\n            },\n            {\n                message: `Year Started must be less than or equal to ${new Date().getFullYear()}`,\n            }\n        ),\n    FloorConstruction: z.enum(\n        Object.keys(FLOOR_CONSTRUCTION) as [string, ...string[]],\n        {\n            message: \"Floor Construction is required\",\n        }\n    ),\n    RoofConstruction: z.enum(\n        Object.keys(ROOF_CONSTRUCTION) as [string, ...string[]],\n        {\n            message: \"Roof Construction is required\",\n        }\n    ),\n    WallContruction: z.enum(\n        Object.keys(WALL_CONSTRUCTION) as [string, ...string[]],\n        {\n            message: \"Wall Construction is required\",\n        }\n    ),\n    EPS: z\n    .string({\n        message: \"Sandwich Panel or EPS is required\",\n    })\n    .min(1, {\n        message: \"Sandwich Panel or EPS is required\",\n    })\n    .refine(\n        (value) => {\n            return Number(value) <= 100;\n        },\n        {\n            message: \"Sandwich Panel or EPS cannot be greater than 100.\",\n        }\n    ),\n    NumberOfStories: z\n        .string()\n        .min(1, {\n            message: \"Number Of Stories is required\",\n        })\n        .refine(\n            (value) => {\n                return Number(value) <= 20;\n            },\n            {\n                message: \"Number Of Stories cannot be greater than 100.\",\n            }\n        ),\n\n    HeritageListing: z.enum([\"yes\", \"no\"], {\n        message: \"Heritage Listing is required\",\n    }),\n\n    LowestFloorYouOccupy: z.enum(Object.keys(FLOOR) as [string, ...string[]], {\n        message: \"Lowest Floor You Occupy is required\",\n    }),\n\n    InterestedParty: z.string().optional(),\n}).strict({\n    message: \"Invalid Form Content\",\n});\n\nexport const BusinessAndContentsSchema = z\n    .object({\n        BuildingLimitAndExcess_Insured: AMOUNT(\"Sum Insured\"),\n        BuildingLimitAndExcess_Excess: SUMEXCESS,\n\n        ContentsLimitAndExcess_Insured: AMOUNT(\"Sum Insured\"),\n        ContentsLimitAndExcess_Excess: SUMEXCESS,\n\n        StockLimitAndExcess_Insured: AMOUNT(\"Sum Insured\"),\n        StockLimitAndExcess_Excess: SUMEXCESS,\n\n        BuildingAndContentClaimHistory: CLAIMS_BOOLEAN,\n\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS),\n    }).strict({\n        message: \"Invalid Form Content\",\n    })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.BuildingAndContentClaimHistory;\n        const claims = data.Claims;\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    })\n\n\nexport const EquipmentBreakdownSchema = z\n    .object({\n        BlanketCover: z.enum(COVER, {\n            message: \"Select a Blanket Cover\",\n        }),\n        DeteriorationOfStock: AMOUNT(\"Deterioration Of Stock\", true),\n        IncreasedCostOfWorking: AMOUNT(\"Increased Cost Of Working\", true),\n        NumberOfMachines: AMOUNT(\"Number Of Machines\"),\n\n        MachineryBreakdownExcess: SUMEXCESS.optional(),\n\n        Computers: AMOUNT(\"Computers\", true),\n\n        PortableElectronicEquipment: AMOUNT(\"Portable Electronic Equipment\", true),\n\n        OtherElectronicEquipment: AMOUNT(\"Other Electronic Equipment\", true),\n\n        ElectronicEquipmentExcess: SUMEXCESS.optional(),\n\n        EquipmentBreakdownClaimHistory: CLAIMS_BOOLEAN,\n\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS),\n    }).strict({\n        message: \"Invalid Form Content\",\n    })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.EquipmentBreakdownClaimHistory;\n        const claims = data.Claims;\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    });\n\n\nconst TheftSchema = z.object({\n    TheftTobaccoExcluding: AMOUNT(\"Theft (Tobacco Excluding)\"),\n    TheftTobacco: AMOUNT(\"Theft (Tobacco)\"),\n    TheftExcess: SUMEXCESS,\n    TheftSecurity: z.enum(\n        Object.keys(THEFT_SECURITY) as [string, ...string[]],\n        {\n            message: \"Theft Security is required\",\n        }\n    ),\n    TheftSecurityExtra: z\n        .array(\n            z.enum(Object.keys(THEFT_SECURITY_EXTRA) as [string, ...string[]], {\n                message: \"Theft Security is required\",\n            })\n        )\n        .optional(),\n});\n\nconst MoneySchema = z.object({\n    MoneyOnPremisesDuringBusinessHours: AMOUNT(\n        \"Money On Premises During Business Hours\",\n        true\n    ),\n    MoneyOnPremisesOutsideBusinessHours: AMOUNT(\n        \"Money On Premises Outside Business Hours\",\n        true\n    ),\n    MoneyOnPremisesInALockedSafe: AMOUNT(\n        \"Money On Premises In A Locked Safe\",\n        true\n    ),\n    MoneyInTransit: AMOUNT(\"Money In Transit\", true),\n    MoneyInAPrivateResidence: AMOUNT(\"Money In A Private Residence\", true),\n    MoneyExcess: SUMEXCESS.optional(),\n});\n\nconst GlassSchema = z.object({\n    IlluminatedSignsSumInsured: AMOUNT(\"Illuminated Signs Sum Insured\", true),\n    Percentage: z\n        .string({\n            message: \"Percentage of Glass Above the Ground Floor is required\",\n        })\n        .min(1, {\n            message: \"Percentage of Glass Above the Ground Floor is required\",\n        })\n        .refine(\n            (value) => {\n                return Number(value) <= 100;\n            },\n            {\n                message:\n                    \"Percentage of Glass Above the Ground Floor cannot be greater than 100.\",\n            }\n        )\n        .refine(\n            (value) => {\n                return Number(value) > 0;\n            },\n            {\n                message: \"Percentage of Glass Above the Ground Floor cannot be 0.\",\n            }\n        ),\n    MoneyExcess: SUMEXCESS.optional(),\n    TypeOfGlass: z.enum(Object.keys(TYPE_OF_GLASS) as [string, ...string[]], {\n        message: \"Type of glass is required\",\n    }),\n    TypeOfPlate: z.enum(Object.keys(TYPE_OF_PLATE) as [string, ...string[]], {\n        message: \"Plate or Non-Plate Glass is required\",\n    }),\n});\n\nexport const TheftMoneyAndGlassSchema = z\n    .object({\n        Sections: z\n            .array(z.enum(THEFT_MONEY_AND_GLASS), {\n                message: \"Please select at least one coverage.\",\n            })\n            .nonempty({\n                message: \"Please select at least one coverage.\",\n            }),\n\n        Theft: TheftSchema.optional(), // Default to optional here\n\n        Money: MoneySchema.optional(), // Default to optional here\n\n        Glass: GlassSchema.optional(), // Default to optional here\n\n        InterestedParty: z.string().optional(),\n        TheftMoneyAndGlassClaimHistory: CLAIMS_BOOLEAN,\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS),\n    })\n    .strict(\n        {\n            message: \"Invalid Form Content\",\n        })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.TheftMoneyAndGlassClaimHistory;\n        const claims = data.Claims;\n\n        const sections = data.Sections;\n        const money = data.Money;\n\n        const allFieldsEmpty =\n            money &&\n            Object.values(money).every(\n                (value) => value === undefined || value === null || value === \"\"\n            );\n\n        if (sections.includes(\"Money\") && allFieldsEmpty) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message:\n                    \"Please enter at least one of the Sum Insured value In Money Section.\",\n                path: [\"Sections\"],\n            });\n        }\n\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    });\n\nexport const BusinessLiabilityCoverageSchema = z\n    .object({\n        LimitsOfLiability: SUMLIABILITY,\n        AnnualWages: AMOUNT(\"Annual Wages\"),\n        Property: AMOUNT(\n            \"Property in Your Physical or Legal Care, Custody or Control\"\n        ),\n        Contractor: AMOUNT(\"Contractor or Labour Hire Payments\"),\n        TaxAudit: TAXAUDITCOVER,\n        Excess: SUMEXCESS,\n        InterestedParty: z.string().optional(),\n        BuildingLiabilityClaimHistory: CLAIMS_BOOLEAN,\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS_LI),\n    }).strict({\n        message: \"Invalid Form Content\",\n    })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.BuildingLiabilityClaimHistory;\n        const claims = data.Claims;\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    });\n\n\nexport const BusinessInterruptionCoverageSchema = z\n    .object({\n        IndemnityPeriod: z.enum(\n            Object.keys(INDEMNITY_PERIOD) as [string, ...string[]],\n            {\n                message: \"Indemnity Period is required\",\n            }\n        ),\n        AnnualGrossProfit: AMOUNT(\"Annual Gross Profit\"),\n        AdditionalIncreaseCostOfWork: AMOUNT(\"Additional Increase Cost of Work\", true),\n        ClaimPreparationCost: AMOUNT(\"Claim Preparation Cost\", true),\n        Excess: SUMEXCESS,\n        BusinessInterruptionClaimHistory: CLAIMS_BOOLEAN,\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS),\n        InterestedParty: z.string().optional(),\n    }).strict({\n        message: \"Invalid Form Content\",\n    })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.BusinessInterruptionClaimHistory;\n        const claims = data.Claims;\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    });\n\n\nexport const PortableBusinessContentsCoverageSchema = z\n    .object({\n        BlanketCoverContent: AMOUNT(\"Blanket Cover Content\"),\n        BlanketCoverStock: AMOUNT(\"Blanket Cover Stock\"),\n\n        Excess: SUMEXCESS,\n        InterestedParty: z.string().optional(),\n\n        PortableBusinessClaimHistory: CLAIMS_BOOLEAN,\n        Claims: z.array(CLAIMS_IN_LAST_FIVE_YEARS),\n\n        PortableSpecifiedItems: z\n            .array(\n                z.object({\n                    category: z\n                        .enum(Object.keys(CATEGORY_OPTIONS) as [string, ...string[]], {\n                            message: \"Category is required\",\n                        }).optional(),\n                    description: z.string().optional(),\n                    value: AMOUNT(\"Value\", true),\n                })\n            )\n            .optional(),\n    }).strict({\n        message: \"Invalid Form Content\",\n    })\n    .superRefine((data, ctx) => {\n        const claimHistory = data.PortableBusinessClaimHistory;\n        const claims = data.Claims;\n        if (claimHistory === \"yes\" && claims.length === 0) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: \"At least one claim is required when claim history is yes\",\n                path: [\"Claims\"],\n            });\n        }\n    });\n\nexport const InsuranceFormGetSchema = z.object({\n    query: z.object({\n        FormType: z.enum(FORMTYPES, {\n            message: 'Form Type is required',\n        }),\n        id: z.string().optional()\n    }).strict({\n        message: \"Invalid Form Content\",\n    }),\n})\n\nexport const InsuranceFormStatusSchema = z.object({\n    query: z.object({\n        id: z.string().optional(),\n    }).strict({\n        message: \"Invalid Form Content\",\n    }),\n})\n\nexport const InsuranceFormPostSchema = z.object({\n    body: z.union([\n        CoverageSelectionFormSchema,\n        PropertyDetailsFormSchema,\n        BusinessAndContentsSchema,\n        EquipmentBreakdownSchema,\n        TheftMoneyAndGlassSchema,\n        BusinessLiabilityCoverageSchema,\n        BusinessInterruptionCoverageSchema,\n        PortableBusinessContentsCoverageSchema,\n    ]),\n\n\n    query: z.object({\n        FormType: z.enum(FORMTYPES, {\n            message: 'Form Type is required',\n        }),\n        id: z.string().optional()\n    }).strict(),\n})\n    .superRefine((data, ctx) => {\n\n        const form = data.query.FormType\n        const content = data.body\n\n        if (form === 'premium-summary' || form === 'quote-summary') {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: 'Invalid Form Type',\n            })\n        }\n\n        if (!FORMTYPES.includes(form)) {\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: 'Form Type is required',\n            })\n        }\n\n        const all = {\n            'coverage-selection': CoverageSelectionFormSchema,\n            'property-details': PropertyDetailsFormSchema,\n            'business-and-contents': BusinessAndContentsSchema,\n            'equipment-breakdown': EquipmentBreakdownSchema,\n            'theft-money-and-glass': TheftMoneyAndGlassSchema,\n            'business-liability-coverage': BusinessLiabilityCoverageSchema,\n            'business-interruption-coverage': BusinessInterruptionCoverageSchema,\n            'portable-business-contents-coverage': PortableBusinessContentsCoverageSchema,\n        }\n\n        if (form) {\n            const result = all[form as keyof typeof all].safeParse(content)\n            if (!result.success) {\n                ctx.addIssue({\n                    code: z.ZodIssueCode.custom,\n                    message: 'Invalid Form Content',\n                })\n            }\n        }\n\n\n    })\n\n\n\nconst FURTHER_QUESTIONS_SCHEMA = z.object({\n    id: z.number(),\n    question: z.string(),\n    answer: z.enum([\"yes\", \"no\"], {\n        message: \"Answer is required\",\n    }),\n});\n\nexport const FurtherAndEndorsementsQuestionsSchema = z\n    .object({\n        DisclaimerAgreedTag: z.boolean().optional(),\n        BusinessAndContents: z.array(FURTHER_QUESTIONS_SCHEMA).optional(),\n        TheftMoneyAndGlass: z.array(FURTHER_QUESTIONS_SCHEMA).optional(),\n        BusinessLiabilityCoverage: z.array(FURTHER_QUESTIONS_SCHEMA).optional(),\n    }).strict({\n        message: \"Invalid Form Content\"\n    })\n\n\n\nexport const InsuranceFormCreateQuote = z.object({\n\n    body: FurtherAndEndorsementsQuestionsSchema,\n\n    query: z.object({\n        FormType: z.enum(['further-and-endorsements-questions'], {\n            message: 'Form Type is required',\n        }),\n    }).strict({\n        message: \"Invalid Form Content\"\n    }),\n})\n\nconst PREMIUM_QUESTIONS_SCHEMA = z.object({\n    id: z.string(),\n    question: z.string(),\n    answer: z.enum([\"yes\", \"no\"], {\n        message: \"Answer is required\",\n    }),\n});\n\nexport const PremiumSummarySchema = z.object({\n    DeclarationQuestions: z.array(PREMIUM_QUESTIONS_SCHEMA),\n    Exemption: z.array(PREMIUM_QUESTIONS_SCHEMA),\n    Liability: z\n        .string({\n            message: \"Liability is required\",\n        })\n        .refine(\n            (value) => {\n                return Number(value) <= 100;\n            },\n            {\n                message: \"Liability cannot be greater than 100.\",\n            }\n        )\n        .optional(),\n    Property: z\n        .string({\n            message: \"Property is required\",\n        })\n        .refine(\n            (value) => {\n                return Number(value) <= 100;\n            },\n            {\n                message: \"Property cannot be greater than 100.\",\n            }\n        )\n        .optional(),\n    BrokerFees: AMOUNT(\"Broker Fees\"),\n})\n\nexport const InsuranceFormFullQuote = z.object({\n\n    body: PremiumSummarySchema,\n\n    query: z.object({\n        FormType: z.enum(['premium-summary'], {\n            message: 'Form Type is required',\n        }),\n    }).strict({\n        message: \"Invalid Form Content\",\n    }),\n})\n\nexport const InsuranceFormCloneModel = z.object({\n    query: z.object({\n        id: z.string({ message: 'ID is required' }),\n    }).strict({ message: \"Invalid Form Content\" })\n})\n\nexport const InsuranceFormDiscardModel = z.object({\n    query: z.object({\n        id: z.string({ message: 'ID is required' }),\n    }).strict({ message: \"Invalid Form Content\" })\n})"]}