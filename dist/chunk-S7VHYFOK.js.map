{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-S7VHYFOK.js","../src/server.ts","../src/api-docs/openAPIRouter.ts","../src/api-docs/openAPIDocumentGenerator.ts","../src/api/v1/v1Router.ts","../src/api/v1/auth/authRouter.ts","../src/api/v1/auth/authController.ts","../src/api/v1/forms/formsRouter.ts","../src/api/v1/forms/insurance/insuranceRouter.ts","../src/api/v1/forms/insurance/insuranceService.ts","../src/common/api/chainhat.ts","../src/common/api/quote.ts","../src/api/v1/forms/insurance/insuranceRepository.ts","../src/api/v1/forms/insurance/insuranceController.ts","../src/api/v1/internal/internalRouter.ts","../src/api/v1/internal/settings/settingsRouter.ts","../src/api/v1/internal/settings/settingsService.ts","../src/api/v1/internal/settings/settingsController.ts","../src/api/v1/internal/stats/statsRouter.ts","../src/api/v1/internal/stats/statsService.ts","../src/api/v1/internal/stats/statsController.ts","../src/api/v1/payment/paymentRouter.ts","../src/api/v1/payment/paymentService.ts","../src/api/v1/payment/paymentRepository.ts","../src/api/v1/payment/paymentController.ts","../src/api/v1/policies/policiesRouter.ts","../src/api/v1/policies/policiesService.ts","../src/api/v1/policies/policiesController.ts","../src/api/v1/auth/authService.ts"],"names":["axios","express","isUserExist","StatusCodes","totalPages","all_quotes"],"mappings":"AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACA;AACF,sDAA4B;AAC5B;AACE;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;AC9IA,wEAAiB;AACjB,oFAAsC;AACtC,gFAAmB;AACnB,4BAAqB;ADgJrB;AACA;AEpJA;AACA,0HAAsB;AFsJtB;AACA;AGxJA,8DAAoD;AH0JpD;AACA;AI3JA;AJ6JA;AACA;AK9JA;AACA;ALgKA;AACA;AM3JA,IAAM,eAAA,YAAN,MAAqB;AAAA,iBACV,OAAA,EAAyB,MAAA,CAAO,GAAA,EAAc,GAAA,EAAA,GAAkB;AACnE,IAAA,MAAM,gBAAA,EAAk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AA;AACA,MAAA;AACM,MAAA;AACV,IAAA;AACK,EAAA;AACE,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACN,MAAA;AACJ,IAAA;AACJ,EAAA;AACJ;AAGa;AACL,EAAA;AACQ,IAAA;AAEA,IAAA;AACJ,IAAA;AAEA,IAAA;AACM,MAAA;AACA,MAAA;AACN,MAAA;AACJ,IAAA;AAEM,IAAA;AAEC,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACV,IAAA;AACK,EAAA;AACE,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACN,MAAA;AACJ,IAAA;AACJ,EAAA;AACJ;AAEa;AACL,EAAA;AACQ,IAAA;AAGJ,IAAA;AACM,MAAA;AACA,MAAA;AACN,MAAA;AACJ,IAAA;AAGM,IAAA;AAEC,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACV,IAAA;AACK,EAAA;AACE,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAA;AACJ,IAAA;AACJ,EAAA;AACJ;AAEa;AACL,EAAA;AACQ,IAAA;AAEA,IAAA;AAEJ,IAAA;AAEA,IAAA;AACM,MAAA;AACA,MAAA;AACN,MAAA;AACJ,IAAA;AAGM,IAAA;AACF,IAAA;AACA,MAAA;AACI,QAAA;AACA,QAAA;AACA,QAAA;AACA,QAAA;AACJ,MAAA;AACJ,IAAA;AACO,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACV,IAAA;AACK,EAAA;AACE,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACM,MAAA;AACN,MAAA;AACJ,IAAA;AACJ,EAAA;AACJ;A5Bk9EY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-S7VHYFOK.js","sourcesContent":[null,"import cors from \"cors\";\nimport express, { type Express } from \"express\";\nimport helmet from \"helmet\";\nimport { pino } from \"pino\";\n\nimport { openAPIRouter } from \"@/api-docs/openAPIRouter\";\nimport { healthCheckRouter } from \"@/api/healthCheck/healthCheckRouter\";\nimport errorHandler from \"@/common/middleware/errorHandler\";\nimport rateLimiter from \"@/common/middleware/rateLimiter\";\nimport requestLogger from \"@/common/middleware/requestLogger\";\nimport { env } from \"@/common/config/env\";\nimport { v1Router } from \"./api/v1/v1Router\";\nimport { signupVerificationRouter } from \"./api/auth/verification/signupVerificationRouter\";\n\nconst logger = pino({ name: \"server start\" });\nconst app: Express = express();\n\n\n// Set the application to trust the reverse proxy\napp.set(\"trust proxy\", true);\n\n// Middlewares\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cors({ origin: env.CORS_ORIGIN, credentials: true }));\napp.use(helmet());\napp.use(rateLimiter);\n\n// Request logging\napp.use(requestLogger);\n\n// Routes\napp.use(\"/health-check\", healthCheckRouter);\napp.use(\"/api/v1\", v1Router);\n\n// Handlebars routes\napp.use('/auth/verification', signupVerificationRouter)\n\n// Swagger UI\nif (env.NODE_ENV === 'development') {\n    app.use(openAPIRouter);\n}\n\n// Error handlers\napp.use(errorHandler());\n\nexport { app, logger };\n","import express, { type Request, type Response, type Router } from \"express\";\nimport swaggerUi from \"swagger-ui-express\";\n\nimport { generateOpenAPIDocument } from \"@/api-docs/openAPIDocumentGenerator\";\n\nexport const openAPIRouter: Router = express.Router();\nconst openAPIDocument = generateOpenAPIDocument();\n\nopenAPIRouter.get(\"/swagger.json\", (_req: Request, res: Response) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.send(openAPIDocument);\n});\n\nopenAPIRouter.use(\"/\", swaggerUi.serve, swaggerUi.setup(openAPIDocument));\n","import { OpenAPIRegistry, OpenApiGeneratorV3 } from \"@asteasolutions/zod-to-openapi\";\n\nimport { healthCheckRegistry } from \"@/api/healthCheck/healthCheckRouter\";\nimport { v1Registry } from \"@/api/v1/v1Router\";\n\nexport function generateOpenAPIDocument() {\n  const registry = new OpenAPIRegistry([healthCheckRegistry, ...v1Registry]);\n  const generator = new OpenApiGeneratorV3(registry.definitions);\n\n  return generator.generateDocument({\n    openapi: \"3.0.0\",\n    info: {\n      version: \"1.0.0\",\n      title: \"Swagger API\",\n    },\n    externalDocs: {\n      description: \"View the raw OpenAPI Specification in JSON format\",\n      url: \"/swagger.json\",\n    },\n  });\n}\n","import express, { type Router } from \"express\";\nimport { authRegistry, authRouter } from \"./auth/authRouter\";\nimport { formsRegistry, formsRouter } from \"./forms/formsRouter\";\nimport { AuthMiddleware } from \"@/common/middleware/authHandler\";\nimport { internalRouter, internalRegistry } from \"./internal/internalRouter\";\nimport { paymentRegistry, paymentRouter } from \"./payment/paymentRouter\";\nimport { policiesRegistry, policiesRouter } from './policies/policiesRouter'\n\nexport const v1Router: Router = express.Router();\n\nexport const v1Registry = [\n    authRegistry,\n    paymentRegistry,\n    policiesRegistry,\n    ...formsRegistry,\n    ...internalRegistry\n]\n\nv1Router.use(AuthMiddleware)\nv1Router.use('/auth', authRouter)\nv1Router.use('/forms', formsRouter)\nv1Router.use('/internal', internalRouter)\nv1Router.use('/payment', paymentRouter)\nv1Router.use(\"/policies\", policiesRouter)","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { authController } from \"./authController\";\nimport { LoginRefreshSchema, LoginSchema, SignUpSchema, ForgotSchema, ResetSchema } from \"./authModel\";\n\n\nexport const authRegistry = new OpenAPIRegistry();\nexport const authRouter: Router = express.Router();\n\nimport { EmployeeRegistrationSchema } from \"./authModel\";\nimport { AuthMiddleware, isAdminOrAgent, isAdminOrSuperAdmin, isAgent, isSuperAdmin } from \"@/common/middleware/authHandler\"; // you'll define this\n\n// POST /v1/auth/signup\n\nauthRegistry.register(\"Signup\", SignUpSchema.shape.body);\n\nauthRegistry.registerPath({\n    method: \"post\",\n    path: \"/v1/auth/signup\",\n    tags: [\"Auth\"],\n    responses: createApiResponse(SignUpSchema, \"Success\"),\n    request: {\n        body: {\n            content: {\n                \"application/json\": {\n                    schema: SignUpSchema.shape.body,\n                }\n            }\n        }\n    }\n});\n\nauthRouter.post('/signup', validateRequest(SignUpSchema), authController.signUp)\n\n\n// POST /v1/auth/login\n\nauthRegistry.register(\"Login\", LoginSchema.shape.body);\n\nauthRegistry.registerPath({\n    method: \"post\",\n    path: \"/v1/auth/login\",\n    tags: [\"Auth\"],\n    responses: createApiResponse(LoginSchema, \"Success\"),\n    request: {\n        body: {\n            content: {\n                \"application/json\": {\n                    schema: LoginSchema.shape.body,\n                }\n            }\n        }\n    }\n});\n\nauthRouter.post('/login', validateRequest(LoginSchema), authController.login)\n\n\n// POST /v1/auth/login/refresh\n\nauthRegistry.register(\"Login Refresh\", LoginRefreshSchema.shape.body);\n\nauthRegistry.registerPath({\n    method: \"post\",\n    path: \"/v1/auth/login/refresh\",\n    tags: [\"Auth\"],\n    responses: createApiResponse(LoginRefreshSchema, \"Success\"),\n    request: {\n        body: {\n            content: {\n                \"application/json\": {\n                    schema: LoginRefreshSchema.shape.body,\n                }\n            }\n        }\n    }\n});\n\nauthRouter.post('/login/refresh', validateRequest(LoginRefreshSchema), authController.loginRefresh)\n\n// POST /v1/auth/forgot\n\nauthRouter.post('/forgot', validateRequest(ForgotSchema), authController.forgot)\n\n// POST /v1/auth/forgot/verify\n\nauthRouter.post('/forgot/reset', validateRequest(ResetSchema), authController.reset)\n\n\nauthRouter.post(\"/register-employee\", isSuperAdmin, authController.registerEmployee );\n\n// GET: Agent – Customer List API\n// authRouter.get(\"/v1/agent/customers\", isAgent, authController.getAgentCustomerList);\n\nauthRouter.get(\"/superadmin/users\", isSuperAdmin, authController.getAllUsersList);\n\n// localhost:3000/api/v1/auth/agents/list-all-users?status=all\nauthRouter.get('/agents/list-all-agents', isSuperAdmin, authController.getAgents);\n\n\n\nauthRouter.put('/approve-agent', isSuperAdmin, authController.AuthApproveAgentController);\n\nauthRouter.put('/update-profile-users',  isAdminOrSuperAdmin, authController.updateProfile);\n\nauthRouter.put('/agent/update-agent-profile', isAdminOrAgent, authController.AuthUpdateAgentProfileController)\n\nauthRouter.put(\"/update-admin-profile\", isAdminOrSuperAdmin, authController.updateAdminProfile);\n\nauthRouter.put('/superadmin/update-profile', isSuperAdmin, authController.updateSuperAdminProfile);\n\n\n","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { AuthApproveAgentService, AuthForgotService, AuthGetAgentsService, AuthLoginRefreshService, AuthLoginService, AuthResetService, AuthSignUpService, AuthUpdateAdminProfileService, AuthUpdateAgentProfileService, AuthUpdateProfileService, AuthUpdateSuperAdminProfileService, GetAllUsersListService } from \"./authService\";\nimport { AuthRegisterEmployeeService } from \"./authService\";\n\n\n\nclass AuthController {\n    public signUp: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await AuthSignUpService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public login: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await AuthLoginService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public loginRefresh: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await AuthLoginRefreshService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    }\n\n    // Forgot password\n\n    public forgot: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await AuthForgotService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n\n    public reset: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await AuthResetService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n\n    public registerEmployee: RequestHandler = async (req: Request, res: Response) => {\n        const response = await AuthRegisterEmployeeService(req.body);\n        return handleServiceResponse(response, res);\n    };\n\n    // New method to handle the Agent - Customer List API\n    // public getAgentCustomerList: RequestHandler = async (req: Request, res: Response) => {\n    //     const agentId = req.user.id; // Assuming user info is attached to request\n    //     const serviceResponse = await GetAgentCustomerListService(agentId);\n    //     return handleServiceResponse(serviceResponse, res);\n    // };\n\n    // New method to handle Super Admin - List All Users API\n    // New method to handle Super Admin – List All Users API\n    public getAllUsersList: RequestHandler = async (req: Request, res: Response) => {\n        const { page = 1, limit = 10000 } = req.query;  // Extract page and limit from query params\n        const serviceResponse = await GetAllUsersListService(Number(page), Number(limit));\n        return handleServiceResponse(serviceResponse, res);\n    };\n\n    // Inside AuthController class:\n    public getAgents: RequestHandler = async (req: Request, res: Response) => {\n        const status = req.query.status as string;\n        const response = await AuthGetAgentsService(status);\n        return handleServiceResponse(response, res);\n    };\n\n    public AuthApproveAgentController: RequestHandler =  async (req: Request, res: Response) => {\n        const { email, isUserVerified } = req.body;\n    \n        if (!email) {\n            return res.status(400).json({\n                success: false,\n                statusCode: 400,\n                message: 'Email and isUserVerified (true/false) are required',\n                data: null\n            });\n        }\n    \n        const response = await AuthApproveAgentService(email, true);\n        res.status(response.statusCode).json(response);\n    };\n\n    public updateProfile: RequestHandler = async (req, res) => {\n        const serviceResponse = await AuthUpdateProfileService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n\n    public AuthUpdateAgentProfileController : RequestHandler = async (req: Request, res: Response) => {\n        const user = (req as any).user;\n        const updatePayload = req.body;\n    \n        const response = await AuthUpdateAgentProfileService({\n            email: updatePayload.email || user.email,\n            ...updatePayload\n        });\n    \n        return res.status(response.statusCode).json(response);\n    }\n    \n       // Update Admin Profile\n       public updateAdminProfile: RequestHandler = async (req, res) => {\n        try {\n            const serviceResponse = await AuthUpdateAdminProfileService(req.body);\n            return res.status(serviceResponse.statusCode).json(serviceResponse);\n        } catch (error : any) {\n            return res.status(500).json({ success: false, message: 'Failed to update admin profile', error: error.message });\n        }\n    };\n\n    public updateSuperAdminProfile: RequestHandler = async (req: Request, res: Response) => {\n        // You might want to use a middleware to verify super admin access before processing this request\n        const serviceResponse = await AuthUpdateSuperAdminProfileService(req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n}\n\n\n\n\nexport const authController = new AuthController();\n\n","import express, { type Router } from \"express\";\nimport { insuranceRegistry, insuranceRouter } from \"./insurance/insuranceRouter\";\n\nexport const formsRouter: Router = express.Router();\n\nexport const formsRegistry = [\n    insuranceRegistry\n]\n\nformsRouter.use('/insurance', insuranceRouter)\n\n\n","import express, { type Router } from \"express\";\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { insuranceController } from \"./insuranceController\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { InsuranceFormPostSchema, InsuranceFormGetSchema, InsuranceFormCreateQuote, InsuranceFormFullQuote, InsuranceFormStatusSchema, InsuranceFormCloneModel, InsuranceFormDiscardModel } from \"./insuranceModel\";\n\nexport const insuranceRegistry = new OpenAPIRegistry();\nexport const insuranceRouter: Router = express.Router();\n\n// GET /v1/forms/insurance/status\n\n\n// insuranceRegistry.registerPath({\n//     method: \"get\",\n//     path: \"/health-check\",\n//     tags: [\"Health Check\"],\n//     responses: createApiResponse(z.null(), \"Success\"),\n// });\n\ninsuranceRouter.get(\"/status\", validateRequest(InsuranceFormStatusSchema), insuranceController.status)\n\n\n// POST /v1/forms/insurance/save\n\ninsuranceRouter.post(\"/save\", validateRequest(InsuranceFormPostSchema), insuranceController.insuranceForm)\n\n// GET /v1/forms/insurance/get\n\ninsuranceRouter.get(\"/get\", validateRequest(InsuranceFormGetSchema), insuranceController.insuranceForm)\n\n// GET /v1/forms/insurance/reset\n\ninsuranceRouter.get(\"/reset\", insuranceController.resetForm)\n\n// POST /v1/forms/insurance/createquote\n\ninsuranceRouter.post(\"/createquote\", validateRequest(InsuranceFormCreateQuote), insuranceController.createQuote)\n\n// POST /v1/forms/insurance/fullquote\n\ninsuranceRouter.post(\"/fullquote\", validateRequest(InsuranceFormFullQuote), insuranceController.fullQuote)\n\n// POST /v1/forms/insurance/blockquote\n\ninsuranceRouter.post(\"/blockquote\", validateRequest(InsuranceFormFullQuote), insuranceController.blockQuote)\n\n// GET /v1/forms/insurance/clone\n\ninsuranceRouter.get(\"/clone\", validateRequest(InsuranceFormCloneModel), insuranceController.clone)\n\n// DEL /v1/forms/insurance/discard\n\ninsuranceRouter.delete(\"/discard\", validateRequest(InsuranceFormDiscardModel), insuranceController.discard)\n","import { redis } from \"@/common/config/redis\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { CoverageSelectionFormTypes, InsuranceStatusTypes } from \"@/common/types/insurance\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { logger } from \"@/server\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\nimport { InsuranceFormCloneModel, InsuranceFormCreateQuote, InsuranceFormDiscardModel, InsuranceFormFullQuote, InsuranceFormPostSchema, InsuranceFormStatusSchema } from \"./insuranceModel\";\nimport { ArrangeCoverages, CoveragesFormName, updateInsuranceStatus, InsuranceFormDefaultValues, InsuranceFormStatusDefault, MetaData, SubmitCreateQuoteForm, SubmitFullQuoteForm, InsuranceFormStatus } from \"./insuranceRepository\";\nimport { COVERAGESROUTES, FORMTYPES_WITH_VALUE } from \"./insuranceStaticData\";\nimport { CreateQuoteTypes, QuoteErrorMessage } from \"@/common/types/api/quote\";\nimport { createQuoteDebug, policies, policiesDelete, policiesGet, policiesUpdateBlockQuote, policiesUpdateCreateQuote, policiesUpdateFullQuote } from \"@/common/models/mongoDB/quote\";\nimport { GETQuoteToken, SubmitBlockQuote } from \"@/common/api/quote\";\n\n\nconst EX = 30 * 24 * 60 * 60\n\nexport const InsuranceStatusService = async (user: UserSessionTypes, query: z.infer<typeof InsuranceFormStatusSchema>['query']) => {\n    try {\n\n        let isStatusExist;\n\n        isStatusExist = query.id ? await redis.get(`InsuranceFormStatus:${query.id}:${user.email}`) : await redis.get(`InsuranceFormStatus:${user.email}`);\n\n        if (query.id && !isStatusExist) {\n            const data = await policiesGet(query.id, user.email);\n\n            if (!data) {\n                return ServiceResponse.failure(\n                    \"No Data Found\",\n                    null,\n                    StatusCodes.NOT_FOUND)\n            }\n\n            if (data) {\n                isStatusExist = data.status;\n                await redis.set(`InsuranceFormStatus:${query.id}:${user.email}`, JSON.stringify(isStatusExist), {\n                    EX: EX\n                })\n                await redis.set(`InsuranceForm:${query.id}:${user.email}`, JSON.stringify(data.data), {\n                    EX: EX\n                })\n            }\n        }\n        const status = isStatusExist ? typeof isStatusExist === 'string' ? JSON.parse(isStatusExist) as InsuranceStatusTypes[] : isStatusExist as InsuranceStatusTypes[] : InsuranceFormStatusDefault;\n\n        const routes = (data: InsuranceStatusTypes[]): string[] => {\n            return data.reduce((queries, item) => {\n                if (!item.disabled || item.title === 'Premium Summary' || item.title === 'Quote Summary') {\n                    queries.push(item.query);\n                }\n                if (item.children) {\n                    queries.push(...routes(item.children));\n                }\n                return queries;\n            }, [] as string[]);\n        };\n\n        return ServiceResponse.success(\"Insurance Status\", {\n            status,\n            routes: routes(status)\n        }, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceStatusService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while Fetching Insurance Form Status\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormGetService = async (user: UserSessionTypes, query: z.infer<typeof InsuranceFormPostSchema>['query']) => {\n    try {\n\n\n        const formType = query.FormType;\n\n        const isExist = query.id ? await redis.get(`InsuranceForm:${query.id}:${user.email}`) : await redis.get(`InsuranceForm:${user.email}`);\n\n        const meta = await MetaData(formType, user, query.id)\n\n        const data = (isExist && JSON.parse(isExist)[formType]) ? JSON.parse(isExist)[formType] : InsuranceFormDefaultValues[formType];\n\n        return ServiceResponse.success(\"Insurance Status\", { ...data, meta }, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormGetService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while fetching Form Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormSaveService = async (user: UserSessionTypes, body: z.infer<typeof InsuranceFormPostSchema>['body'], query: z.infer<typeof InsuranceFormPostSchema>['query']) => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const formStatus = await redis.get(`InsuranceFormStatus:${user.email}`);\n\n        const formType = query.FormType;\n        const data = body;\n        let currentData = isExist ? JSON.parse(isExist) : {};\n        let status = formStatus ? JSON.parse(formStatus) : structuredClone(InsuranceFormStatusDefault)\n\n\n\n        if (!isExist && formType !== 'coverage-selection') {\n            return ServiceResponse.failure(\n                \"Complete the coverage selection form first\",\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        if (formType === 'coverage-selection') {\n            const coverage = (data as CoverageSelectionFormTypes).Coverages;\n            const statusUpdate = InsuranceFormStatus(ArrangeCoverages(coverage))\n            status[1].children = statusUpdate\n            if (currentData) {\n                const allFields = coverage.map((item) => {\n                    return COVERAGESROUTES[item]\n                })\n\n\n                if (currentData['premium-summary'] || status[2]) {\n                    status[2].disabled = true;\n                    status[2].status = 'pending';\n                    delete currentData['premium-summary']\n                }\n\n                if (currentData['quote-summary'] || status[3]) {\n                    status[3].disabled = true;\n                    status[3].status = 'pending';\n                    delete currentData['quote-summary']\n                }\n\n                Object.keys(currentData).forEach((key) => {\n\n                    if (key === 'property-details' && !allFields.includes('business-and-contents')) {\n                        delete currentData['property-details'];\n                    }\n\n                    if (!allFields.includes(key) && key !== 'coverage-selection' && key !== 'property-details' && key !== 'form-id') {\n                        delete currentData[key];\n                    } else {\n                        updateInsuranceStatus(status, key, 'completed')\n                    }\n                });\n            }\n        }\n\n\n        if (Object.values(COVERAGESROUTES).includes(formType)) {\n            if (currentData['further-and-endorsements-questions']) {\n                status[1].children = status[1].children.map((item: { query: string; status: string; disabled: boolean; }) => {\n                    if (item.query === 'further-and-endorsements-questions') {\n                        item.status = 'pending';\n                    }\n                    return item;\n                })\n                delete currentData['further-and-endorsements-questions']\n            }\n            if (currentData['premium-summary']) {\n                status[2].disabled = true;\n                status[2].status = 'pending';\n\n                delete currentData['premium-summary']\n            }\n            if (currentData['quote-summary']) {\n                status[3].disabled = true;\n                status[3].status = 'pending';\n                delete currentData['quote-summary']\n            }\n        }\n        const value = structuredClone(updateInsuranceStatus(status, formType, 'completed'))\n        await redis.set(`InsuranceFormStatus:${user.email}`, JSON.stringify(value), {\n            EX: EX\n        });\n\n        currentData[formType] = data;\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: EX\n        });\n\n        return ServiceResponse.success(`${CoveragesFormName[formType]} Saved Successfully`, null, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormSaveService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while adding ${CoveragesFormName[query.FormType]} Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormResetService = async (user: UserSessionTypes) => {\n    try {\n\n        await redis.del(`InsuranceForm:${user.email}`);\n        await redis.del(`InsuranceFormStatus:${user.email}`);\n\n        return ServiceResponse.success(\"Insurance Form Reset Successfully\", null, StatusCodes.OK);\n\n    } catch (error) {\n        const errorMessage = `InsuranceFormSave: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while reseting the form Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormCreateQuoteService = async (user: UserSessionTypes, body: z.infer<typeof InsuranceFormCreateQuote>['body'], query: z.infer<typeof InsuranceFormCreateQuote>['query']) => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const formStatus = await redis.get(`InsuranceFormStatus:${user.email}`);\n\n        const formType = query.FormType;\n        const data = body;\n        let currentData = isExist ? JSON.parse(isExist) : {};\n        let status = formStatus ? JSON.parse(formStatus) : structuredClone(InsuranceFormStatusDefault)\n\n\n        if (!isExist) {\n            return ServiceResponse.failure(\n                \"Complete the coverage selection form first\",\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        currentData[formType] = data;\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: EX\n        });\n\n\n        const [isSubmit, error] = await SubmitCreateQuoteForm(currentData, user)\n\n        if (error) {\n            return ServiceResponse.failure(\n                error,\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        if ((isSubmit as QuoteErrorMessage).CloverErrorResponse) {\n            return ServiceResponse.failure(\n                (isSubmit as QuoteErrorMessage).ErrorMessage || \"An error occurred while creating quote. Please recheck the form\",\n                { issue: (isSubmit as QuoteErrorMessage).CloverErrorResponse.reasons || [] },\n                StatusCodes.BAD_REQUEST)\n        }\n\n        await createQuoteDebug({\n            meta: {\n                email: user.email,\n                createdAt: new Date(),\n                role: user.role,\n            }, ...isSubmit as Object\n        })\n\n        currentData['create-quote'] = isSubmit;\n        delete currentData['premium-summary']\n        delete currentData['block-quote']\n\n\n        let value = structuredClone(updateInsuranceStatus(status, formType, 'completed'))\n        value[2].status = 'pending';\n        value[2].disabled = false;\n        value[3].disabled = true;\n        await redis.set(`InsuranceFormStatus:${user.email}`, JSON.stringify(value), {\n            EX: EX\n        });\n\n        if (currentData['form-id']) {\n            await policiesUpdateCreateQuote(currentData['form-id'], {\n                data: currentData,\n                status: value\n            })\n        } else {\n            const id = await policies({\n                meta: {\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                    createdAt: new Date(),\n                },\n                data: currentData,\n                status: value\n            });\n            currentData['form-id'] = id;\n        }\n\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: EX\n        });\n\n        await redis.del(`Quotes:${user.email}`)\n        await redis.del(\"Quotes:All\")\n\n        return ServiceResponse.success(`Further And Endorsements Questions Saved Successfully`, null, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormCreateQuoteService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while adding Further And Endorsements Questions Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormBlockQuoteService = async (user: UserSessionTypes, body: z.infer<typeof InsuranceFormFullQuote>['body'], query: z.infer<typeof InsuranceFormFullQuote>['query']) => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const formStatus = await redis.get(`InsuranceFormStatus:${user.email}`);\n\n        const formType = query.FormType;\n        const data = body;\n        let currentData = isExist ? JSON.parse(isExist) : {};\n        let status = formStatus ? JSON.parse(formStatus) : structuredClone(InsuranceFormStatusDefault)\n\n\n        if (!isExist) {\n            return ServiceResponse.failure(\n                \"Complete the coverage selection form first\",\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        currentData[formType] = data;\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: EX\n        });\n\n        const [access] = await GETQuoteToken()\n        const [isSubmit, error] = await SubmitBlockQuote(access?.access_token!, currentData['create-quote'].ProposalNo)\n\n        console.log('block', isSubmit, error)\n\n        if (error) {\n            return ServiceResponse.failure(\n                error,\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        if ((isSubmit as QuoteErrorMessage).CloverErrorResponse) {\n            return ServiceResponse.failure(\n                (isSubmit as QuoteErrorMessage).ErrorMessage || \"An error occurred while creating quote. Please recheck the form\",\n                { issue: (isSubmit as QuoteErrorMessage).CloverErrorResponse.reasons || [] },\n                StatusCodes.BAD_REQUEST)\n        }\n\n\n\n\n        currentData['block-quote'] = isSubmit;\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: EX\n        });\n\n\n\n        let value = structuredClone(updateInsuranceStatus(status, formType, 'completed'))\n        value[3].disabled = false;\n        value[2].disabled = true;\n        await redis.set(`InsuranceFormStatus:${user.email}`, JSON.stringify(value), {\n            EX: EX\n        });\n\n        value[2].disabled = false\n        await policiesUpdateBlockQuote(currentData['form-id'], currentData['premium-summary'], isSubmit!, value)\n\n        await redis.del(`InsuranceForm:${currentData['form-id']}:${user.email}`);\n        await redis.del(`InsuranceFormStatus:${currentData['form-id']}:${user.email}`);\n        await redis.del(`Quotes:${user.email}`)\n        await redis.del(`Quotes:All`)\n        await redis.del(`Block-Quotes:${user.email}`);\n        await redis.del(\"Block-Quotes:All\")\n\n        return ServiceResponse.success(`Premium Summary Saved Successfully`, null, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormBlockQuoteService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while fetching Block Quote Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const InsuranceFormFullQuoteService = async (user: UserSessionTypes, body: z.infer<typeof InsuranceFormFullQuote>['body']) => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const data = body;\n        let currentData = isExist ? JSON.parse(isExist) : {};\n\n        if (!isExist) {\n            return ServiceResponse.failure(\n                \"Complete the coverage selection form first\",\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        const [isSubmit, error] = await SubmitFullQuoteForm(data, currentData['create-quote'])\n        console.log('isSubmit', isSubmit, error)\n        if (error) {\n            return ServiceResponse.failure(\n                error,\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        if ((isSubmit as QuoteErrorMessage).CloverErrorResponse) {\n            return ServiceResponse.failure(\n                (isSubmit as QuoteErrorMessage).ErrorMessage || \"An error occurred while creating quote. Please recheck the form\",\n                { issue: (isSubmit as QuoteErrorMessage).CloverErrorResponse.reasons || [] },\n                StatusCodes.BAD_REQUEST)\n        }\n\n\n        const quote = isSubmit as CreateQuoteTypes\n        const { Coverages } = currentData['coverage-selection'];\n\n        let result = {}\n        if (!quote) {\n            result = {}\n        }\n\n        result = {\n            AgentFee: quote.AgentFees,\n            AgentFeeGST: quote.GSTAgentFee,\n            BrokerFee: quote.BrokerFee,\n            BrokerFeeGST: quote.GSTBrokerFee,\n            isFullQuote: true,\n\n            BrokerCommission: quote.BrokerCommission,\n            GSTBrokerCommission: quote.GSTBrokerCommission,\n\n            isLiability: [\"Business Liability\",\n                \"Business Interruption\",\n                \"Portable Business Content\"].some(item => (Coverages as string[]).includes(item)),\n            isProperty: [\"Business Building and Contents\",\n                \"Equipment Breakdown\",\n                \"Theft, Money and Glass\"].some(item => (Coverages as string[]).includes(item)),\n            DuePremium: quote.DuePremium,\n            quote: [...quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.map((item) => {\n                return {\n                    title: FORMTYPES_WITH_VALUE[item.ProductElementCode as keyof typeof FORMTYPES_WITH_VALUE],\n                    premium: item.StandardNetPremium,\n                    gst: item.GST,\n                    emergencyServiceLevy: item.EmergencyServiceLevy,\n                    stampDuty: item.StampDuty,\n                }\n            }),\n            {\n                title: 'Subtotal',\n                premium: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StandardNetPremium, 0),\n                gst: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.GST, 0),\n                emergencyServiceLevy: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.EmergencyServiceLevy, 0),\n                stampDuty: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StampDuty, 0),\n            }\n            ]\n        }\n\n        return ServiceResponse.success(`Full Quote Generated Successfully`, result, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormFullQuoteService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while fetching Full Quote Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\n\nexport const InsuranceFormClone = async (user: UserSessionTypes, query: z.infer<typeof InsuranceFormCloneModel>['query']) => {\n    try {\n\n        const id = query.id;\n\n        const data = await policiesGet(id, user.email);\n\n        if (!data) {\n            return ServiceResponse.failure(\n                \"No Data Found\",\n                null,\n                StatusCodes.NOT_FOUND)\n        }\n\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(data.data), {\n            EX: EX\n        });\n\n        await redis.set(`InsuranceFormStatus:${user.email}`, JSON.stringify(data.status), {\n            EX: EX\n        });\n\n        return ServiceResponse.success(\"Insurance Form Cloned Successfully\", null, StatusCodes.CREATED);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormClone: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while fetching Form Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\n\nexport const InsuranceFormDiscard = async (user: UserSessionTypes, query: z.infer<typeof InsuranceFormDiscardModel>['query']) => {\n    try {\n\n        const id = query.id;\n\n        await policiesDelete(id, user.email);\n        await redis.del(`Quotes:${user.email}`)\n        await redis.del(`Quotes:All`)\n        await redis.del(`InsuranceForm:${id}:${user.email}`);\n        await redis.del(`InsuranceFormStatus:${id}:${user.email}`);\n\n        return ServiceResponse.success(\"Insurance Form Discard Successfully\", null, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `InsuranceFormClone: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            `An error occurred while fetching Form Data`,\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}","import axios from \"axios\";\nimport { env } from \"@/common/config/env\";\nimport { AddressDetailsTypes, ChainHatTokenTypes } from \"../types/api/chainhat\";\nimport { logger } from \"@/server\";\n\n\nconst {\n    AUSTRALIA_EAST_CHAINTHAT,\n    AUSTRALIA_EAST_CHAINTHAT_CLIENT_ID,\n    AUSTRALIA_EAST_CHAINTHAT_CLIENT_SECRET,\n    AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_ID,\n    AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_CODE\n} = env\n\nexport async function GetChainHatToken(): Promise<[ChainHatTokenTypes | null, null | string]> {\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${AUSTRALIA_EAST_CHAINTHAT}/auth/realms/onepatch/protocol/openid-connect/token`,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                \"X-ebao-tenant-Id\": AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_ID,\n                \"X-ebao-tenant-code\": AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_CODE,\n            },\n            data: new URLSearchParams({\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": AUSTRALIA_EAST_CHAINTHAT_CLIENT_ID,\n                \"client_secret\": AUSTRALIA_EAST_CHAINTHAT_CLIENT_SECRET\n            })\n        })\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `GetChainHatToken: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}\n\n\nexport async function GetAddressDetails(\n    token: string,\n    id: string\n): Promise<[AddressDetailsTypes | null, null | string]> {\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${AUSTRALIA_EAST_CHAINTHAT}/connector-api/route/addressSearch/v1/address`,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n                \"X-ebao-tenant-Id\": AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_ID,\n                \"X-ebao-tenant-code\": AUSTRALIA_EAST_CHAINTHAT_EBAO_TENANT_CODE,\n            },\n            data: JSON.stringify({\n                \"address\": {\n                    \"gnafPid\": id\n                },\n                \"typeOfRequest\": \"GNF_TOKEN\"\n            })\n        })\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `GetAddressDetails: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}","import axios from \"axios\";\nimport { env } from \"@/common/config/env\";\nimport { QuoteErrorMessage, TokenDetail } from \"../types/api/quote\";\nimport { convertDateFormat } from \"../utils/date\";\nimport { logger } from \"@/server\";\n\n\nconst {\n    INSUREMO_API,\n    INSUREMO_USERNAME,\n    INSUREMO_PASSWORD,\n    INSUREMO_CLIENT_ID,\n    INSUREMO_TENANT_ID,\n    INSUREMO_TENANT_CODE,\n    INSUREMO_SOURCE_ID,\n    INSUREMO_SERVER\n} = env\n\nexport async function GETQuoteToken(): Promise<[TokenDetail | null, null | string]> {\n\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${INSUREMO_API}/cas/ebao/v2/json/tickets`,\n            headers: {\n                'Content-Type': 'application/json',\n                \"x-ebao-tenant-code\": INSUREMO_TENANT_CODE,\n                \"x-mo-user-source-id\": INSUREMO_SOURCE_ID,\n                \"x-mo-client-id\": INSUREMO_CLIENT_ID,\n                \"x-mo-tenant-id\": INSUREMO_TENANT_ID,\n            },\n            data: {\n                \"username\": INSUREMO_USERNAME,\n                \"password\": INSUREMO_PASSWORD\n            }\n        })\n\n\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `GETQuoteToken: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}\n\n\nexport async function SubmitCreateQuote(\n    token: string,\n    data: Object\n): Promise<[Object | null, null | string]> {\n\n    try {\n        const res = await axios({\n            method: \"POST\",\n            url: `${INSUREMO_SERVER}/sureinsureau/v1/appframework-bff-app/createQuote`,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n                \"X-ebao-tenant-Id\": INSUREMO_TENANT_ID,\n                \"X-ebao-tenant-code\": INSUREMO_TENANT_CODE,\n            },\n            data: JSON.stringify(data)\n        })\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `SubmitCreateQuote: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}\n\n\nexport async function SubmitFullQuote(\n    token: string,\n    data: Object\n): Promise<[Object | null, null | string]> {\n\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${INSUREMO_SERVER}/sureinsureau/v1/appframework-bff-app/fullQuote`,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n                \"X-ebao-tenant-Id\": INSUREMO_TENANT_ID,\n                \"X-ebao-tenant-code\": INSUREMO_TENANT_CODE,\n            },\n            data: JSON.stringify(data)\n        })\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `SubmitFullQuote: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}\n\n\nexport async function SubmitBlockQuote(\n    token: string,\n    data: string\n): Promise<[Object | null, null | string]> {\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${INSUREMO_SERVER}/sureinsureau/v1/appframework-bff-app/blockQuote`,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n                \"X-ebao-tenant-Id\": INSUREMO_TENANT_ID,\n                \"X-ebao-tenant-code\": INSUREMO_TENANT_CODE,\n            },\n            data: {\n                \"ProposalNo\": data\n            }\n        })\n\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `SubmitBlockQuote: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}\n\n\n\nexport async function SubmitIssueQuote(\n    token: string,\n    data: {\n        ProposalNo: string,\n        RefNo: string,\n        Name: string,\n        Amount: string\n    }\n): Promise<[Object | null, null | string]> {\n\n    try {\n\n        const res = await axios({\n            method: \"POST\",\n            url: `${INSUREMO_SERVER}/sureinsureau/v1/appframework-bff-app/issueQuote`,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n                \"X-ebao-tenant-Id\": INSUREMO_TENANT_ID,\n                \"X-ebao-tenant-code\": INSUREMO_TENANT_CODE,\n            },\n            data: {\n                \"ProposalNo\": data.ProposalNo,\n                \"PolicyPaymentInfoList\": [\n                    {\n                        \"ReferenceNo\": data.RefNo,\n                        \"PaidTime\": convertDateFormat(new Date()),\n                        \"PayeeName\": data.Name,\n                        \"PaidAmount\": data.Amount\n                    }\n                ]\n            }\n        })\n\n        return [res.data, null]\n    } catch (error) {\n        const errorMessage = `SubmitIssueQuote: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return [null, (error as Error).message]\n    }\n\n}","import { ClaimTypes, CoverageTypes, InsuranceFormCreateQuoteDataTypes, InsuranceStatusTypes } from \"@/common/types/insurance\"\nimport { CATEGORY_OPTIONS, CLAIM_TYPES, FIVE_YEAR_LIABILITY, FLOOR, FLOOR_CONSTRUCTION, FORMTYPES, FORMTYPES_WITH_VALUE, INDEMNITY_PERIOD, LOCATION_TYPE_WITH_VALUE, PREMIUM_QUESTION, ROOF_CONSTRUCTION, THEFT_SECURITY, TYPE_OF_BUSINESS_WITH_VALUE, TYPE_OF_GLASS, TYPE_OF_PLATE, WALL_CONSTRUCTION } from './insuranceStaticData'\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { redis } from \"@/common/config/redis\";\nimport { GetAddressDetails, GetChainHatToken } from \"@/common/api/chainhat\";\nimport { GETQuoteToken, SubmitBlockQuote, SubmitCreateQuote, SubmitFullQuote } from \"@/common/api/quote\";\nimport { createQuoteDebug, createQuoteResponseDebugModelQuote } from \"@/common/models/mongoDB/quote\";\nimport { BlockQuoteTypes, CreateQuoteTypes, QuoteErrorMessage } from \"@/common/types/api/quote\";\nimport { convertDateFormat } from \"@/common/utils/date\";\n// import { writeFile } from 'fs/promises'\n\nexport const MetaData = async (type: typeof FORMTYPES[number], user: UserSessionTypes, id?: string) => {\n\n    const isExist = id ? await redis.get(`InsuranceForm:${id}:${user.email}`) : await redis.get(`InsuranceForm:${user.email}`)\n\n    if (!isExist) {\n        return {}\n    }\n\n    const data = JSON.parse(isExist) as typeof InsuranceFormDefaultValues\n    const { streetAddress, BusinessDescription, AnnualTurnover, NumberOfEmployees, EffectiveDate, Coverages, ANZSICCode } = data['coverage-selection']\n\n    if (type === 'property-details') {\n        return {\n            address: streetAddress,\n            occupation: BusinessDescription\n        }\n    }\n\n    if (type === 'business-liability-coverage') {\n        return {\n            turnover: AnnualTurnover,\n            employees: NumberOfEmployees\n        }\n    }\n\n    if (type === 'business-interruption-coverage') {\n        return {\n            turnover: AnnualTurnover,\n        }\n    }\n\n    if (type === 'further-and-endorsements-questions') {\n\n        const coverage = Coverages as CoverageTypes\n\n        const currentDate = new Date();\n        currentDate.setHours(0, 0, 0, 0);\n\n        const effectiveDate = new Date(EffectiveDate);\n        effectiveDate.setHours(0, 0, 0, 0);\n\n        return {\n            effectiveDate: currentDate > effectiveDate,\n            BusinessAndContents: coverage.includes('Business Building and Contents'),\n            TheftMoneyAndGlass: coverage.includes('Theft, Money and Glass'),\n            BusinessLiabilityCoverage: coverage.includes('Business Liability'),\n            ANZSICCode: Number(ANZSICCode)\n        }\n    }\n\n    if (type === 'premium-summary') {\n\n        const quote = data['create-quote'] as unknown as CreateQuoteTypes\n        const fullQuote = JSON.parse(isExist)['block-quote'] as unknown as CreateQuoteTypes || {}\n\n        if (!quote) {\n            return {}\n        }\n\n        return {\n            AgentFee: quote.AgentFees,\n            AgentFeeGST: quote.GSTAgentFee,\n            BrokerFee: fullQuote.BrokerFee ? fullQuote.BrokerFee : quote.BrokerFee,\n            BrokerFeeGST: fullQuote.GSTBrokerFee ? fullQuote.GSTBrokerFee : quote.GSTBrokerFee,\n            BrokerCommission: fullQuote.BrokerCommission ? fullQuote.BrokerCommission : quote.BrokerCommission,\n            GSTBrokerCommission: fullQuote.GSTBrokerCommission ? fullQuote.GSTBrokerCommission : quote.GSTBrokerCommission,\n            isFullQuote: false,\n            isLiability: [\"Business Liability\",\n                \"Business Interruption\",\n                \"Portable Business Content\"].some(item => (Coverages as string[]).includes(item)),\n            isProperty: [\"Business Building and Contents\",\n                \"Equipment Breakdown\",\n                \"Theft, Money and Glass\"].some(item => (Coverages as string[]).includes(item)),\n            DuePremium: fullQuote.DuePremium ? fullQuote.DuePremium : quote.DuePremium,\n\n            BrokerFees: user.role === 'User' ? \"10\" : \"0\",\n            Liability: user.role === 'User' ? \"20\" : \"20\",\n            Property: user.role === 'User' ? \"20\" : \"20\",\n\n            quote: [...quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.map((item) => {\n                return {\n                    title: FORMTYPES_WITH_VALUE[item.ProductElementCode as keyof typeof FORMTYPES_WITH_VALUE],\n                    premium: item.StandardNetPremium,\n                    gst: item.GST,\n                    emergencyServiceLevy: item.EmergencyServiceLevy,\n                    stampDuty: item.StampDuty,\n                }\n            }),\n            {\n                title: 'Subtotal',\n                premium: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StandardNetPremium, 0),\n                gst: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.GST, 0),\n                emergencyServiceLevy: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.EmergencyServiceLevy, 0),\n                stampDuty: quote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StampDuty, 0),\n            }\n            ]\n        }\n    }\n\n    if (type === 'quote-summary') {\n        const blockQuote = JSON.parse(isExist)['block-quote'] as BlockQuoteTypes\n\n        if (!blockQuote) {\n            return {}\n        }\n\n        return {\n            Address: blockQuote.PolicyLobList[0].PolicyRiskList[0].FullAddress,\n            status: blockQuote.CarrierPolicyStatus,\n            effectiveDate: blockQuote.EffectiveDate,\n            expiryDate: blockQuote.ExpiryDate,\n            AgentFee: blockQuote.AgentFees,\n            AgentFeeGST: blockQuote.GSTAgentFee,\n            BrokerFee: blockQuote.BrokerFee,\n            BrokerFeeGST: blockQuote.GSTBrokerFee,\n            InsuredName: blockQuote.BusinessName,\n            TransitionType: blockQuote.IsRenewable === 'Y' ? 'Renewal' : 'New Business',\n            quoteNo: blockQuote.CarrierQuoteNumber,\n\n            BrokerCommission: blockQuote.BrokerCommission,\n            GSTBrokerCommission: blockQuote.GSTBrokerCommission,\n\n            ProposalNo: blockQuote.ProposalNo,\n\n            DuePremium: blockQuote.DuePremium,\n            quote: [...blockQuote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.map((item) => {\n                return {\n                    title: FORMTYPES_WITH_VALUE[item.ProductElementCode as keyof typeof FORMTYPES_WITH_VALUE],\n                    premium: item.StandardNetPremium,\n                    gst: item.GST,\n                    emergencyServiceLevy: item.EmergencyServiceLevy,\n                    stampDuty: item.StampDuty,\n                }\n            }),\n            {\n                title: 'Subtotal',\n                premium: blockQuote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StandardNetPremium, 0),\n                gst: blockQuote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.GST, 0),\n                emergencyServiceLevy: blockQuote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.EmergencyServiceLevy, 0),\n                stampDuty: blockQuote.PolicyLobList[0].PolicyRiskList[0].PolicyCoverageList.reduce((acc, item) => acc + item.StampDuty, 0),\n            }\n            ]\n        }\n    }\n\n    return {}\n\n}\n\nconst GetOptions = (field: keyof typeof PREMIUM_QUESTION) => {\n    return PREMIUM_QUESTION[field].map((q) => ({\n        id: q.id,\n        question: q.question,\n    }));\n};\n\n\nexport const InsuranceFormStatusDefault: InsuranceStatusTypes[] = [\n    {\n        title: \"Coverage Selection\",\n        status: \"in-progress\",\n        query: \"coverage-selection\",\n        disabled: false,\n    },\n    {\n        title: \"Business Details\",\n        status: \"pending\",\n        query: \"business-details\",\n        disabled: true,\n    },\n    {\n        title: \"Premium Summary\",\n        status: \"pending\",\n        query: \"premium-summary\",\n        disabled: true,\n    },\n    {\n        title: \"Quote Summary\",\n        status: \"pending\",\n        query: \"quote-summary\",\n        disabled: true,\n    },\n];\n\nconst DATE = new Date(new Date().setHours(0, 0, 0, 0))\nconst CoverageSelectionDefault = {\n    ABN: \"\",\n    EffectiveDate: DATE,\n    ExpiryDate: new Date(DATE).setFullYear(DATE.getFullYear() + 1),\n    BusinessName: \"\",\n    BusinessDescription: \"\",\n    ANZSICCode: \"\",\n    streetAddress: \"\",\n    AnnualTurnover: \"\",\n    NumberOfEmployees: \"\",\n    YearStarted: \"\",\n    LocationType: \"\",\n    TypeOfBusiness: \"Business Operations Only\",\n    Coverages: [],\n}\n\nconst PropertyDetailsDefault = {\n    YearBuilt: \"\",\n    EPS: \"\",\n    NumberOfStories: \"\",\n    HeritageListing: \"no\",\n    InterestedParty: \"\",\n}\n\nconst BusinessAndContentsDefault = {\n    BuildingLimitAndExcess_Insured: \"\",\n    BuildingLimitAndExcess_Excess: \"250\",\n    ContentsLimitAndExcess_Insured: \"\",\n    ContentsLimitAndExcess_Excess: \"1000\",\n    StockLimitAndExcess_Insured: \"\",\n    StockLimitAndExcess_Excess: \"1000\",\n}\n\nconst EquipmentBreakdownDefault = {\n    DeteriorationOfStock: \"\",\n    NumberOfMachines: \"\",\n    IncreasedCostOfWorking: \"\",\n    OtherElectronicEquipment: \"\",\n    Computers: \"\",\n    PortableElectronicEquipment: \"\",\n}\n\nconst BusinessLiabilityCoverageDefault = {\n    LimitsOfLiability: \"20000000\",\n    AnnualWages: \"\",\n    Property: \"\",\n    InterestedParty: \"\",\n    Contractor: \"\",\n    TaxAudit : \"0\",\n    Excess : \"500\"\n}\n\nconst PortableBusinessContentsCoverageDefault = {\n    BlanketCoverContent: \"\",\n    BlanketCoverStock: \"\",\n    PortableSpecifiedItems: [{\n        description: ''\n    }],\n}\n\nexport const InsuranceFormDefaultValues = {\n    'coverage-selection': CoverageSelectionDefault,\n    'property-details': PropertyDetailsDefault,\n    'business-and-contents': BusinessAndContentsDefault,\n    'equipment-breakdown': EquipmentBreakdownDefault,\n    'theft-money-and-glass': {},\n    'business-liability-coverage': BusinessLiabilityCoverageDefault,\n    'business-interruption-coverage': {\n        AnnualGrossProfit: \"\",\n    },\n    'portable-business-contents-coverage': PortableBusinessContentsCoverageDefault,\n    'further-and-endorsements-questions': {\n        DisclaimerAgreedTag: false,\n    },\n    'premium-summary': {\n        DeclarationQuestions: GetOptions(\"Declaration Questions\"),\n        Exemption: GetOptions(\"Exemption\"),\n        // BrokerFees: \"0\",\n        // Liability: \"20\",\n        // Property: \"20\",\n    },\n    'quote-summary': {},\n    'create-quote': \"\"\n}\n\nexport const Coverages = {\n    \"Business Building and Contents\": \"Business and Contents\",\n    \"Equipment Breakdown\": \"Equipment Breakdown\",\n    \"Theft, Money and Glass\": \"Theft, Money and Glass\",\n    \"Business Liability\": \"Business Liability Coverage\",\n    \"Business Interruption\": \"Business Interruption Coverage\",\n    \"Portable Business Content\": \"Portable Business Contents Coverage\",\n}\n\nexport const CoveragesFormName = {\n    'coverage-selection': 'Coverage Selection',\n    'property-details': 'Property Details',\n    'business-and-contents': 'Business Building and Contents',\n    'equipment-breakdown': 'Equipment Breakdown',\n    'theft-money-and-glass': 'Theft, Money and Glass',\n    'business-liability-coverage': 'Business Liability',\n    'business-interruption-coverage': 'Business Interruption',\n    'portable-business-contents-coverage': 'Portable Business Contents Coverage',\n    'further-and-endorsements-questions': 'Further and Endorsements Questions',\n    'premium-summary': 'Premium Summary',\n    'quote-summary': 'Quote Summary',\n}\n\nexport const ArrangeCoverages = (coverages: string[]) => {\n    const desiredOrder = [\n        \"Business Building and Contents\",\n        \"Equipment Breakdown\",\n        \"Theft, Money and Glass\",\n        \"Business Liability\",\n        \"Business Interruption\",\n        \"Portable Business Content\",\n    ];\n\n    return desiredOrder.filter((coverage) => coverages.includes(coverage)) as CoverageTypes;\n};\n\nexport const InsuranceFormStatus = (coverages: CoverageTypes) => {\n    const status: InsuranceStatusTypes[] = [\n        {\n            title: \"Property Covers\",\n            status: \"pending\",\n            query: \"property-covers\",\n            disabled: true,\n            children: []\n        },\n        {\n            title: \"Policy Covers\",\n            status: \"pending\",\n            query: \"policy-covers\",\n            disabled: true,\n            children: []\n        }\n    ]\n\n\n    const propertyCovers = ['Business Building and Contents', 'Equipment Breakdown', 'Theft, Money and Glass']\n    const policyCovers = ['Business Liability', 'Business Interruption', 'Portable Business Content']\n\n\n\n    coverages.forEach((value) => {\n\n        const title = Coverages[value]\n\n\n        if ((value === 'Business Building and Contents' || (value === 'Equipment Breakdown' && policyCovers.includes('Business Liability')) || (value === 'Theft, Money and Glass' && policyCovers.includes('Business Liability')))) {\n            status[0].children?.push(\n                {\n                    title: \"Property Details\",\n                    status: \"pending\",\n                    query: \"property-details\",\n                    disabled: false,\n                }\n            )\n        }\n\n        if (propertyCovers.includes(value)) {\n\n            status[0].children?.push({\n                title: title,\n                status: \"pending\",\n                query: title.toLowerCase().replace(/[\\s,]+/g, '-'),\n                disabled: false\n            })\n        }\n\n\n        if (policyCovers.includes(value)) {\n            status[1].children?.push({\n                title: title,\n                status: \"pending\",\n                query: title.toLowerCase().replace(/[\\s,]+/g, '-'),\n                disabled: false\n            })\n        }\n    })\n\n\n\n\n\n    const filteredStatus = status.filter(item => item.children && item.children.length > 0)\n\n    // Remove duplicates based on the title property\n    const uniqueFilteredStatus = filteredStatus.map(item => {\n        item.children = item.children?.filter((child, index, self) =>\n            index === self.findIndex((t) => (\n                t.title === child.title\n            ))\n        )\n        return item\n    })\n\n\n    return [\n        ...uniqueFilteredStatus,\n        {\n            title: \"Further And Endorsements Questions\",\n            status: \"pending\",\n            query: \"further-and-endorsements-questions\",\n            disabled: false,\n            children: []\n        }\n    ] as InsuranceStatusTypes[]\n\n}\n\n\nexport const updateInsuranceStatus = (items: InsuranceStatusTypes[], query: string, status: InsuranceStatusTypes['status']): InsuranceStatusTypes[] => {\n    let value = items\n\n    for (const item of items) {\n        if (item.query === query) {\n            item.status = status\n        }\n        if (item.children) {\n            updateInsuranceStatus(item.children, query, status);\n\n            // Check if all children are complete\n            if (item.children.length > 0) {\n                const allChildrenComplete = item.children.every(child => child.status === \"completed\");\n                if (allChildrenComplete) {\n                    item.status = \"completed\";\n                }\n            }\n\n        }\n    }\n\n    return value;\n};\n\nconst GiveN_OR_Y = (value: 'no' | 'yes') => {\n    return value === 'no' ? \"N\" : \"Y\"\n}\n\n\nexport const SubmitCreateQuoteForm = async (data: InsuranceFormCreateQuoteDataTypes, user: UserSessionTypes) => {\n    try {\n\n        const [token, issue] = await GetChainHatToken()\n\n\n        if (!token && issue) {\n            throw new Error(issue)\n        }\n\n\n        const {\n            streetAddress,\n            EffectiveDate,\n            ExpiryDate,\n            ABN,\n            AnnualTurnover,\n            BusinessName,\n            NumberOfEmployees,\n            ANZSICCode,\n            BusinessDescription,\n            YearStarted,\n            TypeOfBusiness,\n            LocationType,\n            Coverages,\n            isManual,\n            ...remaining\n        } = data['coverage-selection']\n\n        const PROPERTY_DETAILS = data['property-details']\n        const BUSINESS_AND_CONTENTS = data['business-and-contents']\n        const EQUIPMENT_BREAKDOWN = data['equipment-breakdown']\n        const { DisclaimerAgreedTag, ...FURTHER_QUESTIONS_AND_ENDORSEMENTS } = data['further-and-endorsements-questions']\n        const THEFT_MONEY_AND_GLASS = data['theft-money-and-glass']\n        const BUSINESS_LIABILITY_COVERAGE = data['business-liability-coverage']\n        const BUSINESS_INTERRUPTION_COVERAGE = data['business-interruption-coverage']\n        const { PortableSpecifiedItems, ...PORTABLE_BUSINESS_CONTENTS_COVERAGE } = data['portable-business-contents-coverage'] || {\n            PortableSpecifiedItems: []\n        }\n\n        const [address, error] = await GetAddressDetails(token?.access_token!, streetAddress)\n\n\n        if (!address && error) {\n            throw new Error(error)\n        }\n\n        const ALL_QUESTIONS = [\n            ...(FURTHER_QUESTIONS_AND_ENDORSEMENTS['BusinessAndContents'] || []),\n            ...(FURTHER_QUESTIONS_AND_ENDORSEMENTS['BusinessLiabilityCoverage'] || []),\n            ...(FURTHER_QUESTIONS_AND_ENDORSEMENTS['TheftMoneyAndGlass'] || [])\n        ]\n\n\n\n        const ALL_QUESTIONS_WITH_CLAIMS = [\n            ...(ALL_QUESTIONS || []),\n            ...(BUSINESS_AND_CONTENTS ? [{\n                id: 43,\n                question: \"Claims In Last Five Years?\",\n                answer: BUSINESS_AND_CONTENTS.BuildingAndContentClaimHistory\n            }] : []),\n            ...(EQUIPMENT_BREAKDOWN ? [{\n                id: 45,\n                question: \"Claims In Last Five Years?\",\n                answer: EQUIPMENT_BREAKDOWN.EquipmentBreakdownClaimHistory\n            }] : []),\n            ...(THEFT_MONEY_AND_GLASS ? [{\n                id: 44,\n                question: \"Claims In Last Five Years?\",\n                answer: THEFT_MONEY_AND_GLASS.TheftMoneyAndGlassClaimHistory\n            }] : []),\n            ...(BUSINESS_LIABILITY_COVERAGE ? [{\n                id: 40,\n                question: \"Claims In Last Five Years?\",\n                answer: BUSINESS_LIABILITY_COVERAGE.BuildingLiabilityClaimHistory\n            }] : []),\n            ...(PORTABLE_BUSINESS_CONTENTS_COVERAGE && PORTABLE_BUSINESS_CONTENTS_COVERAGE.PortableBusinessClaimHistory ? [{\n                id: 42,\n                question: \"Claims In Last Five Years?\",\n                answer: PORTABLE_BUSINESS_CONTENTS_COVERAGE.PortableBusinessClaimHistory\n            }] : []),\n        ]\n\n        const findQuestionDetailsWithClaims = (id: number) => {\n            return ALL_QUESTIONS_WITH_CLAIMS.find(item => item.id === id)?.answer || 'no'\n        }\n\n\n\n        const ALLFORMQUESTIONS = ALL_QUESTIONS_WITH_CLAIMS.map((i) => {\n            return {\n                \"ProductElementCode\": \"OCCUPATIONCLAUSEQA\",\n                \"QuestionId\": String(i.id),\n                \"AnswerCode\": GiveN_OR_Y(findQuestionDetailsWithClaims(i.id))\n            }\n        })\n\n\n        const ClaimList = (value: ClaimTypes[], code: string, type: \"LI\" | \"ALL\" = 'ALL') => {\n            return value.map((item) => {\n                return {\n                    \"ProductElementCode\": \"CLAIMS\",\n                    \"ProductCoverageId\": code,\n                    \"ClaimType\": type === 'ALL' ? CLAIM_TYPES[item.ClaimType as keyof typeof CLAIM_TYPES] : FIVE_YEAR_LIABILITY[item.ClaimType as keyof typeof FIVE_YEAR_LIABILITY],\n                    \"ClaimType_Name\": item.ClaimType,\n                    \"DateOfLoss\": item.YearOfLoss,\n                    \"LossAmount\": item.Value\n                }\n            })\n        }\n\n        const currentYear = new Date().getFullYear();\n\n        const findQuestionDetails = (id: number) => {\n            return ALL_QUESTIONS.find(item => item.id === id)?.answer || 'no'\n        }\n\n        const isQuestionExist = (id: number) => {\n            return ALL_QUESTIONS.find(item => item.id === id)\n        }\n\n\n        let BUSINESS_AND_CONTENTS_VALUES\n        let EQUIPMENT_BREAKDOWN_VALUES\n        let THEFT_MONEY_AND_GLASS_VALUES\n        let BUSINESS_LIABILITY_COVERAGE_VALUES\n        let BUSINESS_INTERRUPTION_COVERAGE_VALUES\n        let PORTABLE_BUSINESS_CONTENTS_COVERAGE_VALUES\n        let PROPERTY_DETAILS_VALUES;\n\n        const findElementValue = (field: string) => {\n            return address ? address.providerResponse.Elements.find(item => item.Field === field)?.Value || '' : ''\n        }\n\n        const ADDRESS = {\n            \"IsPrimaryAddress\": \"false\",\n            \"AddressTypeCode\": \"mailing\",\n            // \"IsManualAddress\": String(isManual) || \"false\", // TODO : Need to check\n            \"IsManualAddress\": \"false\",\n            \"AddressLine1\": address?.addressInfo[0].addressLine1,\n            \"AddressLine2\": address?.addressInfo[0].addressLine2,\n            \"City\": address?.addressInfo[0].city,\n            \"PostalCode\": address?.addressInfo[0].postalCode,\n            \"CountryCode\": address?.addressInfo[0].countryCode,\n            \"Territory\": `AU-${address?.addressInfo[0].province}`,\n            \"Latitude\": address?.addressInfo[0].latitude,\n            \"Longitude\": address?.addressInfo[0].longitude,\n            \"GnafPID\": address?.providerResponse.GNAF_PID,\n            \"FullAddress\": address?.addressInfo[0].freeFormAddress,\n            \"StateOrProvinceCode\": address?.addressInfo[0].province,\n        }\n\n        if (PROPERTY_DETAILS) {\n            PROPERTY_DETAILS_VALUES = {\n                \"RoofMaterial\": \"\",\n                \"YearBuilt\": `${PROPERTY_DETAILS.YearBuilt}-01-01`,\n                \"FloorConstruction\": FLOOR_CONSTRUCTION[PROPERTY_DETAILS.FloorConstruction as keyof typeof FLOOR_CONSTRUCTION],\n                \"RoofConstruction\": ROOF_CONSTRUCTION[PROPERTY_DETAILS.RoofConstruction as keyof typeof ROOF_CONSTRUCTION],\n                \"WallConstruction\": WALL_CONSTRUCTION[PROPERTY_DETAILS.WallContruction as keyof typeof WALL_CONSTRUCTION],\n                \"SandwichPanelorEPS\": PROPERTY_DETAILS.EPS,\n                \"NumberOfStoriesInTheBuilding\": PROPERTY_DETAILS.NumberOfStories,\n                \"AreAnyOfTheBuildingsHeritageListed\": PROPERTY_DETAILS.HeritageListing,\n                \"LocatedFloor\": FLOOR[PROPERTY_DETAILS.LowestFloorYouOccupy as keyof typeof FLOOR],\n                \"RiskInterestedParty\": PROPERTY_DETAILS.InterestedParty,\n                \"FloorConstruction_Name\": PROPERTY_DETAILS.FloorConstruction,\n                \"WallConstruction_Name\": PROPERTY_DETAILS.WallContruction,\n                \"LowestFloorYouOccupy_Name\": PROPERTY_DETAILS.LowestFloorYouOccupy,\n                \"RoofConstruction_Name\": PROPERTY_DETAILS.RoofConstruction,\n            }\n        }\n\n        if (BUSINESS_AND_CONTENTS) {\n            BUSINESS_AND_CONTENTS_VALUES = {\n                \"ProductElementCode\": \"C0001788\",\n                \"LineOfBusinessCode\": \"PRP\",\n                // // Need To Replace\n                // \"BNCFurtherQuestion1\": \"\",\n                // \"BNCFurtherQuestion2\": \"\",\n                // \"BNCFurtherQuestion3\": \"\",\n                // \"BNCFurtherQuestion4\": \"\",\n                // \n                ...(isQuestionExist(27) && { \"CommercialCookingClauseQuestion\": GiveN_OR_Y(findQuestionDetails(27)) }),\n                ...(isQuestionExist(26) && { \"FloodCoverQuestion\": GiveN_OR_Y(findQuestionDetails(26)) }),\n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(BUSINESS_AND_CONTENTS.BuildingAndContentClaimHistory),\n                PolicyBenefitList: [\n                    {\n                        \"ProductElementCode\": \"B00868\",\n                        \"SumInsured\": BUSINESS_AND_CONTENTS.BuildingLimitAndExcess_Insured,\n                        \"Excess\": BUSINESS_AND_CONTENTS.BuildingLimitAndExcess_Excess\n                    },\n                    {\n                        \"ProductElementCode\": \"B00869\",\n                        \"SumInsured\": BUSINESS_AND_CONTENTS.ContentsLimitAndExcess_Insured,\n                        \"Excess\": BUSINESS_AND_CONTENTS.ContentsLimitAndExcess_Excess\n                    },\n                    {\n                        \"ProductElementCode\": \"B00870\",\n                        \"SumInsured\": BUSINESS_AND_CONTENTS.StockLimitAndExcess_Insured,\n                        \"Excess\": BUSINESS_AND_CONTENTS.StockLimitAndExcess_Excess\n                    }\n                ]\n            }\n        }\n\n        if (EQUIPMENT_BREAKDOWN) {\n            EQUIPMENT_BREAKDOWN_VALUES = {\n                \"ProductElementCode\": \"C0001790\",\n                \"LineOfBusinessCode\": \"PRP\",\n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(EQUIPMENT_BREAKDOWN.EquipmentBreakdownClaimHistory),\n                \"PolicyBenefitList\": [\n                    {\n                        \"ProductElementCode\": \"B00874\",\n                        \"BlanketCover\": EQUIPMENT_BREAKDOWN.BlanketCover,\n                        \"Excess\": EQUIPMENT_BREAKDOWN.MachineryBreakdownExcess,\n                        \"DeteriorationOfStock\": EQUIPMENT_BREAKDOWN.DeteriorationOfStock,\n                        \"ICOWIncreasedCostofWorking\": EQUIPMENT_BREAKDOWN.IncreasedCostOfWorking,\n                        \"NumberofMachines\": EQUIPMENT_BREAKDOWN.NumberOfMachines\n                    },\n                    {\n                        \"ProductElementCode\": \"B00875\",\n                        \"Excess\": EQUIPMENT_BREAKDOWN.ElectronicEquipmentExcess,\n                        \"ComputerLimit\": EQUIPMENT_BREAKDOWN.Computers,\n                        \"PortableElectronicEquipment\": EQUIPMENT_BREAKDOWN.PortableElectronicEquipment,\n                        \"OtherElectronicEquipment\": EQUIPMENT_BREAKDOWN.OtherElectronicEquipment\n                    }\n                ]\n            }\n        }\n\n        if (THEFT_MONEY_AND_GLASS) {\n            THEFT_MONEY_AND_GLASS_VALUES = {\n                \"ProductElementCode\": \"C0001789\",\n                \"LineOfBusinessCode\": \"PRP\",\n                // Need To Replace\n                // \"TMGFurtherQuestion1\": \"\",\n                // \n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(THEFT_MONEY_AND_GLASS.TheftMoneyAndGlassClaimHistory),\n                \"PolicyBenefitList\": [\n                    {\n                        \"ProductElementCode\": \"B00871\",\n                        \"TheftExcludingTobacco\": THEFT_MONEY_AND_GLASS.Theft?.TheftTobaccoExcluding,\n                        \"TheftTobacco\": THEFT_MONEY_AND_GLASS.Theft?.TheftTobacco,\n                        \"Excess\": THEFT_MONEY_AND_GLASS.Theft?.TheftExcess,\n                        \"SecurityAlarm\": THEFT_SECURITY[THEFT_MONEY_AND_GLASS.Theft?.TheftSecurity as keyof typeof THEFT_SECURITY],\n                        \"DeadlocksonallExternalDoors\": String(THEFT_MONEY_AND_GLASS.Theft?.TheftSecurityExtra?.includes('Deadlocks on all External Doors')),\n                        \"KeyOpredLocksonallExterWins\": String(THEFT_MONEY_AND_GLASS.Theft?.TheftSecurityExtra?.includes('Key Operated Locks on all External Windows')),\n                        \"Barsecurscreensonallexternwins\": String(THEFT_MONEY_AND_GLASS.Theft?.TheftSecurityExtra?.includes('Bars/security screens on all external windows?'))\n                    },\n                    {\n                        \"ProductElementCode\": \"B00872\",\n                        \"MoneyInPremisesDuringBuSInessSI\": THEFT_MONEY_AND_GLASS.Money?.MoneyOnPremisesDuringBusinessHours,\n                        \"Moneyonpremoutsidebusinesshrs\": THEFT_MONEY_AND_GLASS.Money?.MoneyOnPremisesOutsideBusinessHours,\n                        \"Moneyonpremlockedsafe\": THEFT_MONEY_AND_GLASS.Money?.MoneyOnPremisesInALockedSafe,\n                        \"MoneyInTranSItSI\": THEFT_MONEY_AND_GLASS.Money?.MoneyInTransit,\n                        \"Moneyinapvtresidence\": THEFT_MONEY_AND_GLASS.Money?.MoneyInAPrivateResidence,\n                        \"Excess\": THEFT_MONEY_AND_GLASS.Money?.MoneyExcess\n                    },\n                    {\n                        \"ProductElementCode\": \"B00873\",\n                        \"GlassSumInsured\": \"Replacement Value\",\n                        \"SumInsured\": THEFT_MONEY_AND_GLASS.Glass?.IlluminatedSignsSumInsured,\n                        \"TypeofGlass\": TYPE_OF_GLASS[THEFT_MONEY_AND_GLASS.Glass?.TypeOfGlass as keyof typeof TYPE_OF_GLASS],\n                        \"PercentageGlassAbvGrndFlr\": THEFT_MONEY_AND_GLASS.Glass?.Percentage,\n                        \"PlateTypeGlass\": TYPE_OF_PLATE[THEFT_MONEY_AND_GLASS.Glass?.TypeOfPlate as keyof typeof TYPE_OF_PLATE],\n                        \"Excess\": THEFT_MONEY_AND_GLASS.Glass?.MoneyExcess,\n                        \"GlassInterestedParty\": THEFT_MONEY_AND_GLASS.InterestedParty\n                    }\n                ]\n            }\n        }\n\n        if (BUSINESS_LIABILITY_COVERAGE) {\n            BUSINESS_LIABILITY_COVERAGE_VALUES = {\n                \"ProductElementCode\": \"C0001785\",\n                \"LineOfBusinessCode\": \"GELI\",\n                \"DirectorHistory\": \"DH3\",\n                \"CreditScore\": \"CS1\",\n                \"Import\": \"N\",\n\n                // Need To Replace\n                // \"BLCovFurtherQuestion1\": \"N\",\n                // \"BLCovFurtherQuestion2\": \"N\",\n                // \"BLCovFurtherQuestion3\": \"N\",\n                // \"BLCovFurtherQuestion4\": \"N\",\n                // \n                \"BLInterestedParty\": BUSINESS_LIABILITY_COVERAGE.InterestedParty,\n\n                \"AnnualWages\": BUSINESS_LIABILITY_COVERAGE.AnnualWages,\n                \"Turnover\": AnnualTurnover,\n                \"NumberofEmployees\": Number(NumberOfEmployees),\n                \"PropertyUnderYourCareorCustody\": BUSINESS_LIABILITY_COVERAGE.Property,\n                \"ConctororLabourHirePaynts\": BUSINESS_LIABILITY_COVERAGE.Contractor,\n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(BUSINESS_LIABILITY_COVERAGE.BuildingLiabilityClaimHistory),\n                \"PolicyBenefitList\": [\n                    {\n                        \"ProductElementCode\": \"B00863\",\n                        \"LimitOfLiability\": BUSINESS_LIABILITY_COVERAGE.LimitsOfLiability,\n                        \"TaxAuditSI\": BUSINESS_LIABILITY_COVERAGE.TaxAudit,\n                        \"Excess\": BUSINESS_LIABILITY_COVERAGE.Excess,\n                    }\n                ]\n            }\n        }\n\n        if (BUSINESS_INTERRUPTION_COVERAGE) {\n            BUSINESS_INTERRUPTION_COVERAGE_VALUES = {\n                \"ProductElementCode\": \"C0001786\",\n                \"LineOfBusinessCode\": \"PRP\",\n                \"IndemnityPeriod\": INDEMNITY_PERIOD[BUSINESS_INTERRUPTION_COVERAGE.IndemnityPeriod as keyof typeof INDEMNITY_PERIOD],\n                \"IndemnityPeriod_Name\": BUSINESS_INTERRUPTION_COVERAGE.IndemnityPeriod,\n                \"GrossProfit\": BUSINESS_INTERRUPTION_COVERAGE.AnnualGrossProfit,\n                \"AdditionIncreaseCostOfWorking\": BUSINESS_INTERRUPTION_COVERAGE.AdditionalIncreaseCostOfWork,\n                \"ClaimPreparationCost\": BUSINESS_INTERRUPTION_COVERAGE.ClaimPreparationCost,\n                \"BIInterestedParty\": BUSINESS_INTERRUPTION_COVERAGE.InterestedParty,\n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(BUSINESS_INTERRUPTION_COVERAGE.BusinessInterruptionClaimHistory),\n                \"PolicyBenefitList\": [\n                    {\n                        \"ProductElementCode\": \"B00864\",\n                        \"Excess\": BUSINESS_INTERRUPTION_COVERAGE.Excess,\n                        \"Turnover\": AnnualTurnover,\n                    }\n                ]\n            }\n        }\n\n\n\n        if (PORTABLE_BUSINESS_CONTENTS_COVERAGE && PortableSpecifiedItems) {\n            PORTABLE_BUSINESS_CONTENTS_COVERAGE_VALUES = {\n                \"ProductElementCode\": \"C0001787\",\n                \"LineOfBusinessCode\": \"PRP\",\n                \"PBCInterestedParty\": PORTABLE_BUSINESS_CONTENTS_COVERAGE.InterestedParty,\n                \"ClaimsInLastFiveYears\": GiveN_OR_Y(PORTABLE_BUSINESS_CONTENTS_COVERAGE.PortableBusinessClaimHistory),\n                \"PolicyBenefitList\": [\n                    {\n                        \"ProductElementCode\": \"B00865\",\n                        \"BlanketCoverContent\": PORTABLE_BUSINESS_CONTENTS_COVERAGE.BlanketCoverContent,\n                    },\n                    {\n                        \"ProductElementCode\": \"B00866\",\n                        \"BlanketCoverStock\": PORTABLE_BUSINESS_CONTENTS_COVERAGE.BlanketCoverStock,\n                        \"Excess\": PORTABLE_BUSINESS_CONTENTS_COVERAGE.Excess\n                    },\n                    {\n                        \"ProductElementCode\": \"B00867\",\n                        \"ReplacementValueOfTotalContents\": (PortableSpecifiedItems && PortableSpecifiedItems.length !== 0 && typeof PortableSpecifiedItems[0].category !== 'undefined' && typeof PortableSpecifiedItems[0].description !== 'undefined') ? String(PortableSpecifiedItems.reduce((total, item) => total + Number(item.value), 0)) : \"0\",\n                        \"Excess\": PORTABLE_BUSINESS_CONTENTS_COVERAGE.Excess,\n                    }\n                ],\n                \"PolicyEntityList\": (PortableSpecifiedItems && PortableSpecifiedItems.length !== 0 && typeof PortableSpecifiedItems[0].category !== 'undefined' && typeof PortableSpecifiedItems[0].description !== 'undefined') ? PortableSpecifiedItems.map((value) => {\n                    return {\n                        \"ProductElementCode\": \"PROPERTYBUSINESSCONTENTSPECIFIEDITEMS\",\n                        \"Category\": CATEGORY_OPTIONS[value.category as keyof typeof CATEGORY_OPTIONS],\n                        \"Category_Name\": value.category,\n                        \"ItemsDescription\": value.description,\n                        \"ReplacementValue\": value.value\n                    }\n                }) : []\n            }\n        }\n\n        const response = {\n            \"ProductCode\": \"BPIP01\",\n            \"ProductVersion\": \"1.0\",\n            \"CarrierReferenceNumber\": \"\",\n            \"CarrierQuoteNumber\": \"\",\n            \"CarrierPolicyNo\": \"\",\n            \"AgencyCode\": \"\",\n            \"PolicyStage\": \"\",\n            \"CarrierPolicyStatus\": \"\",\n            \"TrackingNumber\": \"\",\n            \"LineOfBusinessCode\": \"VAR\",\n            \"CarrierProductCode\": \"OBP1\",\n            \"PolicyTerm\": \"365\",\n\n            // Coverage Selection\n            \"EffectiveDate\": convertDateFormat(EffectiveDate),\n            \"ExpiryDate\": convertDateFormat(ExpiryDate),\n            DisclaimerAgreedTag: String(DisclaimerAgreedTag),\n            \"ABN\": ABN,\n            \"Turnover\": AnnualTurnover,\n            \"BusinessName\": BusinessName,\n            \"NumberofEmployees\": Number(NumberOfEmployees),\n            \"JobDescription\": BusinessDescription,\n            \"YearBusinessStarted\": YearStarted,\n            \"ANZSICCode\": ANZSICCode,\n            \"YearsInBusiness\": currentYear - Number(YearStarted),\n\n            PolicyCustomerList: [\n                {\n                    // Coverage Selection\n                    \"CustomerName\": BusinessName,\n                    \"JobDescription\": BusinessDescription,\n                    \"ANZSICCode\": ANZSICCode,\n\n                    // Address\n                    \"CustomerType\": \"organization\",\n                    \"StreetName\": address?.addressInfo[0].street,\n                    ...ADDRESS\n                }\n            ],\n\n            PolicyLobList: [\n                {\n                    \"ProductCode\": \"BPIP01\",\n                    \"PolicyRiskList\": [\n                        {\n                            \"ProductElementCode\": \"R00005\",\n                            \"Flood_FL_rate_SME_Cts\": findElementValue('Flood_FL_rate_SME_Cts'),\n                            \"Flood_FL_rate_SME_Bld\": findElementValue('Flood_FL_rate_SME_Bld'),\n                            \"Bushfire_risk_score\": findElementValue('bushfire_risk_score'),\n                            \"Cyclone_risk_score\": findElementValue('cyclone_risk_score'),\n                            \"Storm_risk_score_SME_Bld\": findElementValue('storm_risk_score_SME_Bld'),\n                            \"Storm_risk_score_SME_Cts\": findElementValue('storm_risk_score_SME_Cts'),\n                            \"Bld_elevation\": findElementValue('bld_elevation'),\n                            \"Flood_FL_ARI_GL\": findElementValue('flood_FL_ARI_GL'),\n                            \"SecurityFeatures\": \"\",\n                            \"RuralMetro\": \"\",\n                            \"TerrorLevyTier\": \"B\",\n\n\n                            \"NoOfLevel\": \"2\", // TODO : Need to check\n\n                            // Coverages\n                            \"TypeOfBusiness_Name\": TypeOfBusiness,\n                            \"LocationType_Name\": LocationType,\n                            \"JobDescription\": BusinessDescription,\n                            \"LocationType\": LOCATION_TYPE_WITH_VALUE[LocationType],\n                            \"TypeOfBusiness\": TYPE_OF_BUSINESS_WITH_VALUE[TypeOfBusiness],\n\n                            // Address\n                            ...ADDRESS,\n\n                            // Property Details\n                            ...(PROPERTY_DETAILS && PROPERTY_DETAILS_VALUES),\n\n                            // Theft, Money and Glass\n                            \"IsTheftCoverage\": String(THEFT_MONEY_AND_GLASS ? THEFT_MONEY_AND_GLASS.Sections.includes('Theft') : false),\n                            \"IsMoneyCoverage\": String(THEFT_MONEY_AND_GLASS ? THEFT_MONEY_AND_GLASS.Sections.includes('Money') : false),\n                            \"IsGlassCoverage\": String(THEFT_MONEY_AND_GLASS ? THEFT_MONEY_AND_GLASS.Sections.includes('Glass') : false),\n\n                            'PolicyCoverageList': [\n                                ...(Coverages.includes('Business Building and Contents') ? [BUSINESS_AND_CONTENTS_VALUES] : []),\n                                ...(Coverages.includes('Equipment Breakdown') ? [EQUIPMENT_BREAKDOWN_VALUES] : []),\n                                ...(Coverages.includes('Theft, Money and Glass') ? [THEFT_MONEY_AND_GLASS_VALUES] : []),\n                                ...(Coverages.includes('Business Liability') ? [BUSINESS_LIABILITY_COVERAGE_VALUES] : []),\n                                ...(Coverages.includes('Business Interruption') ? [BUSINESS_INTERRUPTION_COVERAGE_VALUES] : []),\n                                ...(Coverages.includes('Portable Business Content') ? [PORTABLE_BUSINESS_CONTENTS_COVERAGE_VALUES] : []),\n                            ],\n                            PolicyEntityList: [\n                                ...(isQuestionExist(27) ? [{\n                                    \"ProductElementCode\": \"BLENDORSEMENT\",\n                                    \"EndorsementType\": \"PreBind\",\n                                    \"EndorsementNo\": \"ENDO_012\",\n                                    \"EndorsementName\": \"Commercial Cooking Clause\",\n                                    \"ProductCoverageId\": \"C0001788\",\n                                    \"ValueType\": \"amount\",\n                                    \"IsMandatory\": \"\",\n                                    \"GrossPremium\": \"\",\n                                    \"SequenceNumber\": \"1\",\n                                    \"PolicyRiskId\": \"R00005\",\n                                    \"PolicyEntityList\": [\n                                        {\n                                            \"ProductElementCode\": \"BLQUESTIONANSWER\",\n                                            \"QuestionCode\": \"ENDO_012_Q1\",\n                                            \"QuestionAnswer\": \"Does the business employ a professional cleaner to clean the exhaust or extraction system ducting annually?\",\n                                            \"AnswerCode\": findQuestionDetails(27)\n                                        }\n                                    ]\n                                }] : []),\n                                ...(isQuestionExist(26) ? [{\n                                    \"ProductElementCode\": \"BLENDORSEMENT\",\n                                    \"EndorsementType\": \"PreBind\",\n                                    \"EndorsementNo\": \"ENDO_008\",\n                                    \"EndorsementName\": \"Flood Cover\",\n                                    \"ProductCoverageId\": \"C0001788\",\n                                    \"IsMandatory\": \"\",\n                                    \"GrossPremium\": \"\",\n                                    \"ValueType\": \"amount\",\n                                    \"SequenceNumber\": \"2\",\n                                    \"PolicyRiskId\": \"R00005\",\n                                    \"PolicyEntityList\": [\n                                        {\n                                            \"ProductElementCode\": \"BLQUESTIONANSWER\",\n                                            \"QuestionCode\": \"ENDO_008_Q1\",\n                                            \"QuestionAnswer\": \"Do you require flood cover?\",\n                                            \"AnswerCode\": findQuestionDetails(26)\n                                        }\n                                    ]\n                                }] : []),\n                                // ...ALLFORMQUESTIONS.filter(q => {\n                                //     return q.QuestionId !== String(41) || (ALLFORMQUESTIONS.find(question => question.QuestionId === '39') && ALLFORMQUESTIONS.find(question => question.QuestionId === '39')?.AnswerCode === 'N')\n                                // })\n\n                                ...ALLFORMQUESTIONS.filter(q => q.QuestionId !== '41' || (ALLFORMQUESTIONS.find(question => question.QuestionId === '39')?.AnswerCode === 'Y'))\n\n                            ]\n                        }\n                    ],\n                    PolicyEntityList: [\n                        ...(Coverages.includes('Business Building and Contents') ? ClaimList(BUSINESS_AND_CONTENTS.Claims, 'C0001788') : []),\n                        ...(Coverages.includes('Equipment Breakdown') ? ClaimList(EQUIPMENT_BREAKDOWN.Claims, 'C0001790') : []),\n                        ...(Coverages.includes('Theft, Money and Glass') ? ClaimList(THEFT_MONEY_AND_GLASS.Claims, 'C0001789') : []),\n                        ...(Coverages.includes('Business Liability') ? ClaimList(BUSINESS_LIABILITY_COVERAGE.Claims, 'C0001785', \"LI\") : []),\n                        ...(Coverages.includes('Business Interruption') ? ClaimList(BUSINESS_INTERRUPTION_COVERAGE.Claims, 'C0001786') : []),\n                        ...(Coverages.includes('Portable Business Content') ? ClaimList(PORTABLE_BUSINESS_CONTENTS_COVERAGE.Claims, 'C0001787') : []),\n                    ]\n                }\n            ],\n            \"PolicyPaymentInfoList\": [\n                {\n                    \"BillingType\": \"ABI\",\n                    \"PaymentPlan\": \"PPC001\",\n                    \"IsInstallment\": \"N\"\n                }\n            ]\n        }\n\n        // await writeFile('insurance-form-create-quote.json', JSON.stringify(response, null, 2))\n\n        const [access] = await GETQuoteToken()\n        const responseValue = await SubmitCreateQuote(access?.access_token!, response)\n\n        await createQuoteResponseDebugModelQuote({\n            meta: {\n                email: user.email,\n                role: user.role,\n                createdAt: new Date()\n            },\n            ...response\n        })\n\n        if ((responseValue[0] as QuoteErrorMessage).CloverErrorResponse) {\n            await createQuoteDebug({\n                meta: {\n                    email: user.email,\n                    role: user.role,\n                    createdAt: new Date(),\n                    errorResponse: responseValue[0]\n                }, ...response\n            })\n        }\n\n\n        return responseValue\n\n\n\n    } catch (error) {\n        return [null, (error as Error).message]\n    }\n\n}\n\nexport const SubmitFullQuoteForm = async (data: InsuranceFormCreateQuoteDataTypes['premium-summary'], createQuote: Object) => {\n\n    try {\n\n        const {\n            DeclarationQuestions,\n            Exemption,\n            Liability,\n            Property,\n            BrokerFees\n        } = data\n\n        const { BrokerFee, ...rest } = createQuote as { BrokerFee: string }\n\n        const response = {\n            \"LibCommission\": Liability || 0,\n            \"PropCommission\": Property || 0,\n            \"Hadanyinsurdeclinedorcancelled\": GiveN_OR_Y(DeclarationQuestions[0].answer),\n            \"ConvictedCriminalOffence\": GiveN_OR_Y(DeclarationQuestions[1].answer),\n            \"BankruptorInsolvencyBusiness\": GiveN_OR_Y(DeclarationQuestions[2].answer),\n            \"Sufferedlossordamagecovbyinspol\": GiveN_OR_Y(DeclarationQuestions[3].answer),\n            \"NSWstampDutyExemption\": GiveN_OR_Y(Exemption[0].answer),\n            \"BrokerFee\": BrokerFees,\n            ...rest\n\n        }\n\n        const [access] = await GETQuoteToken()\n\n        const responseValue = await SubmitFullQuote(access?.access_token!, response)\n        return responseValue\n\n    } catch (error) {\n        return [null, (error as Error).message]\n    }\n\n}\n","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { InsuranceFormBlockQuoteService, InsuranceFormCreateQuoteService, InsuranceFormFullQuoteService, InsuranceFormGetService, InsuranceFormClone, InsuranceFormResetService, InsuranceFormSaveService, InsuranceStatusService, InsuranceFormDiscard } from \"./insuranceService\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { z } from \"zod\";\nimport { InsuranceFormCloneModel, InsuranceFormCreateQuote, InsuranceFormDiscardModel, InsuranceFormFullQuote, InsuranceFormPostSchema, InsuranceFormStatusSchema } from \"./insuranceModel\";\n\n\nclass InsuranceController {\n    public status: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceStatusService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof InsuranceFormStatusSchema>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public insuranceForm: RequestHandler = async (req: Request, res: Response) => {\n        let serviceResponse;\n        if (req.method === \"GET\") {\n            serviceResponse = await InsuranceFormGetService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof InsuranceFormPostSchema>['query']);\n        } else {\n            serviceResponse = await InsuranceFormSaveService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body as z.infer<typeof InsuranceFormPostSchema>['body'], req.query as z.infer<typeof InsuranceFormPostSchema>['query']);\n        }\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public createQuote: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormCreateQuoteService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body as z.infer<typeof InsuranceFormCreateQuote>['body'], req.query as z.infer<typeof InsuranceFormCreateQuote>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    }\n    public resetForm = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormResetService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes);\n        return handleServiceResponse(serviceResponse, res);\n    }\n    public fullQuote: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormFullQuoteService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body as z.infer<typeof InsuranceFormFullQuote>['body']);\n        return handleServiceResponse(serviceResponse, res);\n    }\n    public blockQuote: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormBlockQuoteService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body as z.infer<typeof InsuranceFormFullQuote>['body'], req.query as z.infer<typeof InsuranceFormFullQuote>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    }\n    public clone = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormClone(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof InsuranceFormCloneModel>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    }\n    public discard = async (req: Request, res: Response) => {\n        const serviceResponse = await InsuranceFormDiscard(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof InsuranceFormDiscardModel>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    }\n}\n\nexport const insuranceController = new InsuranceController();","import express, { type Router } from \"express\";\nimport { InternalMiddleware } from \"@/common/middleware/internalHandler\";\nimport { settingsRegistry, settingsRouter } from './settings/settingsRouter';\nimport { statsRegistry, statsRouter } from \"./stats/statsRouter\";\n\nexport const internalRouter: Router = express.Router();\n\nexport const internalRegistry = [\n    settingsRegistry,\n    statsRegistry,\n]\n\ninternalRouter.use(InternalMiddleware)\ninternalRouter.use('/settings', settingsRouter)\ninternalRouter.use('/stats', statsRouter)","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { settingsController } from \"./settingsController\";\nimport { CreateUserSchema } from './settingsModel'\n\nexport const settingsRegistry = new OpenAPIRegistry();\nexport const settingsRouter: Router = express.Router();\n\nsettingsRouter.post('/user/create', validateRequest(CreateUserSchema), settingsController.createUser)","import { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { logger } from \"@/server\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { z } from \"zod\";\nimport { CreateUserSchema } from \"./settingsModel\";\nimport { userSignupRedisRepository } from \"@/common/models/redis/user\";\nimport { createUser, findUser } from \"@/common/models/mongoDB/user\";\nimport { generatePassword } from \"@/common/utils/common\";\nimport { genSalt, hash } from \"bcrypt\";\nimport { redis } from \"@/common/config/redis\";\n\n\nexport const SettingsCreateUserService = async (user: UserSessionTypes, body: z.infer<typeof CreateUserSchema>['body']) => {\n    try {\n        const isUserExist = await userSignupRedisRepository.fetch(body.email);\n\n        if (isUserExist.email) {\n            await userSignupRedisRepository.remove(body.email);\n        }\n\n        const userAccount = await findUser(body.email);\n\n        if (userAccount) {\n            return ServiceResponse.failure(\n                \"User already exists\",\n                null,\n                StatusCodes.UNAUTHORIZED\n            )\n        }\n\n        if (user.role === 'Admin' && body.role === 'Admin') {\n            return ServiceResponse.failure(\n                \"Admin can't create another admin\",\n                null,\n                StatusCodes.UNAUTHORIZED\n            )\n        }\n\n\n        const user_password = generatePassword(10)\n        const salt = await genSalt(10);\n        const hashedPassword = await hash(user_password, salt);\n\n        await createUser({\n            ...body,\n            isEmailVerified: true,\n            password: hashedPassword,\n            isUserVerified: true,\n        })\n\n        await redis.del(`Stats:Users:${body.role}`);\n\n        return ServiceResponse.success(`Successfully ${body.role} created`, null, StatusCodes.CREATED);\n    }\n    catch (error) {\n        const errorMessage = `SettingsCreateUserService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating users.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { SettingsCreateUserService } from './settingsService'\nimport { z } from \"zod\";\nimport { CreateUserSchema } from \"./settingsModel\";\nimport { UserSessionTypes } from \"@/common/types/user\";\n\n\nclass SettingsController {\n    public createUser: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await SettingsCreateUserService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body as z.infer<typeof CreateUserSchema>['body']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n}\n\nexport const settingsController = new SettingsController();","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { statsController } from \"./statsController\";\nimport { GetUserSchema } from \"./statsModel\";\n\nexport const statsRegistry = new OpenAPIRegistry();\nexport const statsRouter: Router = express.Router();\n\nstatsRouter.get(\"/users/get\", validateRequest(GetUserSchema), statsController.getUser)","import { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { logger } from \"@/server\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { z } from \"zod\";\nimport { GetUserSchema } from \"./statsModel\";\nimport { getUserByRole, getUserByRoleFilterUsingEmail, userModel } from \"@/common/models/mongoDB/user\";\nimport { redis } from \"@/common/config/redis\";\n\n\n\nexport const StatsGetUserService = async (query: z.infer<typeof GetUserSchema>['query']) => {\n    try {\n\n        const page = Number(query.page || \"1\");\n        const role = query.role;\n        const email = query.email;\n        const limit = 10\n\n        if (email) {\n            const isUserWithEmailExist = await redis.get(`Stats:Users:${query.role}:${email}`);\n            let data = isUserWithEmailExist ? JSON.parse(isUserWithEmailExist) : {};\n\n            if (isUserWithEmailExist) {\n                return ServiceResponse.success(`Successfully Get ${query.role}`, {\n                    \"totalCounts\": 1,\n                    \"totalPages\": 1,\n                    \"currentPage\": 1,\n                    \"data\": data ? data : [],\n                }, StatusCodes.OK);\n            }\n\n            const user = await getUserByRoleFilterUsingEmail(query.role, email);\n\n            await redis.set(`Stats:Users:${query.role}:${email}`, JSON.stringify(user), {\n                EX: 2 * 24 * 60 * 60\n            })\n            return ServiceResponse.success(`Successfully Get ${query.role}`, {\n                \"totalCounts\": 1,\n                \"totalPages\": 1,\n                \"currentPage\": 1,\n                \"data\": user ? user : [],\n            }, StatusCodes.OK);\n        }\n\n\n        const isUsersExist = await redis.get(`Stats:Users:${query.role}`);\n        let usersData = isUsersExist ? JSON.parse(isUsersExist) : {};\n\n        const all_pages = usersData['totalPages'];\n        const all_data = usersData['data'] ? usersData['data'][page] : null;\n\n\n        if (isUsersExist && all_data && all_pages >= page) {\n            return ServiceResponse.success(`Successfully Get ${query.role}`, {\n                \"totalCounts\": usersData['totalCounts'],\n                \"totalPages\": usersData['totalPages'],\n                \"currentPage\": page,\n                \"data\": usersData['data'][page],\n            }, StatusCodes.OK);\n        }\n\n        if (isUsersExist && all_pages < page) {\n            return ServiceResponse.success(`Successfully Get ${query.role}`, {\n                \"totalCounts\": usersData['totalCounts'],\n                \"totalPages\": usersData['totalPages'],\n                \"currentPage\": page,\n                \"data\": [],\n            }, StatusCodes.OK);\n        }\n\n        const total = await userModel.countDocuments({ role: role });\n        const totalPages = Math.ceil(total / limit);\n        const all_users = totalPages < page ? [] : await getUserByRole(query.role, page, limit);\n\n        usersData['totalCounts'] = total;\n        usersData['totalPages'] = totalPages;\n\n        if (totalPages >= page) {\n            usersData['data'] = { ...usersData['data'], [page]: all_users };\n        }\n        await redis.set(`Stats:Users:${query.role}`, JSON.stringify(usersData), {\n            EX: 30 * 24 * 60 * 60\n        });\n\n        return ServiceResponse.success(`Successfully Get ${query.role}`, {\n            \"totalCounts\": usersData['totalCounts'],\n            \"totalPages\": usersData['totalPages'],\n            \"currentPage\": page,\n            \"data\": all_users,\n        }, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `StatsGetUserService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating users.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { z } from \"zod\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { StatsGetUserService } from \"./statsService\";\nimport { GetUserSchema } from \"./statsModel\";\n\n\nclass StatsController {\n    public getUser: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await StatsGetUserService(req.query as z.infer<typeof GetUserSchema>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n}\n\nexport const statsController = new StatsController();","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { paymentController } from \"./paymentController\";\nimport { PaymentCreateSchema, PaymentPeriodSchema, PaymentStatusSchema } from \"./paymentModel\";\n\n\nexport const paymentRegistry = new OpenAPIRegistry();\nexport const paymentRouter: Router = express.Router();\n\n// POST /v1/payment/create\n\npaymentRouter.post('/create', validateRequest(PaymentCreateSchema), paymentController.create)\n\n// GET /v1/payment/status\n\npaymentRouter.get('/status', validateRequest(PaymentStatusSchema), paymentController.status)\n\n// POST /v1/payment/period\n\npaymentRouter.post('/period', validateRequest(PaymentPeriodSchema), paymentController.period)","import { env } from \"@/common/config/env\";\nimport { stripe } from \"@/common/config/stripe\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { logger } from \"@/server\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\nimport { PaymentCreateSchema, PaymentStatusSchema } from \"./paymentModel\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { redis } from \"@/common/config/redis\";\nimport { SubmitIssueQuoteForm } from \"./paymentRepository\";\nimport { QuoteErrorMessage } from \"@/common/types/api/quote\";\nimport { policiesUpdateFullQuote, periodPayment } from \"@/common/models/mongoDB/quote\";\n\nconst { FRONTEND_DOMAIN } = env\n\nexport const PaymentCreateService = async (user: UserSessionTypes, body: z.infer<typeof PaymentCreateSchema>['body']) => {\n    try {\n\n        const session = await stripe.checkout.sessions.create({\n            line_items: [{\n                price_data: {\n                    currency: 'aud',\n                    product_data: {\n                        name: 'Business Insurance',\n                    },\n                    unit_amount: Number(body.amount) * 100,\n                },\n                quantity: 1,\n            }],\n            mode: 'payment',\n            ui_mode: 'embedded',\n            customer_email: user.email,\n            return_url: `${FRONTEND_DOMAIN}/dashboard/quotation/payment?session_id={CHECKOUT_SESSION_ID}`,\n        });\n\n        return ServiceResponse.success(\"Successfully create payment link\", { clientSecret: session.client_secret }, StatusCodes.CREATED);\n    }\n    catch (error) {\n        const errorMessage = `PaymentCreateService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating payment link.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const PaymentStatusService = async (user: UserSessionTypes, query: z.infer<typeof PaymentStatusSchema>['query']) => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const formStatus = await redis.get(`InsuranceFormStatus:${user.email}`);\n        const isPaymentCompleted = await redis.get(`InsurancePaymentCompleted:${user.email}:${query.id}`);\n\n        if (isPaymentCompleted) {\n            return ServiceResponse.failure(\n                \"Successfully get payment status\",\n                JSON.parse(isPaymentCompleted),\n                StatusCodes.OK,\n            );\n        }\n\n        const session = await stripe.checkout.sessions.retrieve(query.id);\n\n        if (!isExist || !formStatus) {\n            return ServiceResponse.failure(\n                \"An error occurred while fetching payment status.\",\n                null,\n                StatusCodes.INTERNAL_SERVER_ERROR,\n            );\n        }\n\n        if (session.payment_status === 'unpaid') {\n            return ServiceResponse.failure(\n                \"Payment is not completed.\",\n                null,\n                StatusCodes.INTERNAL_SERVER_ERROR,\n            );\n        }\n\n        let currentData = JSON.parse(isExist);\n\n        const block = currentData['block-quote'] as {\n            CarrierReferenceNumber: string,\n            ProposalNo: string,\n            DuePremium: string,\n            BusinessName: string,\n        };\n\n        const [isSubmit, error] = await SubmitIssueQuoteForm(block);\n\n\n        if (error) {\n            return ServiceResponse.failure(\n                error,\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        if ((isSubmit as QuoteErrorMessage).CloverErrorResponse) {\n            return ServiceResponse.failure(\n                \"An error occurred while creating quote. Please recheck the form\",\n                null,\n                StatusCodes.BAD_REQUEST)\n        }\n\n        currentData['quote-summary'] = isSubmit;\n        await redis.set(`InsuranceForm:${user.email}`, JSON.stringify(currentData), {\n            EX: 30 * 24 * 60 * 60\n        });\n\n\n        await policiesUpdateFullQuote(currentData['form-id'], isSubmit!);\n\n        await redis.del(`InsuranceForm:${currentData['form-id']}:${user.email}`);\n        await redis.del(`InsuranceFormStatus:${currentData['form-id']}:${user.email}`);\n\n\n        await redis.del(`InsuranceFormStatus:${user.email}`);\n        await redis.del(`InsuranceForm:${user.email}`);\n        await redis.del(`Block-Quotes:${user.email}`);\n        await redis.del(\"Block-Quotes:All\");\n        await redis.del(`Policies:${user.email}`);\n        await redis.del(`Policies:All`);\n\n\n        const { PolicyNo, CarrierReferenceNumber } = isSubmit as {\n            PolicyNo: string,\n            CarrierReferenceNumber: string,\n        };\n\n\n        const res = {\n            payment: {\n                status: session.status,\n                payment_status: session.payment_status,\n                customer_email: session.customer_details?.email,\n                id: session.payment_intent,\n                amount: session.amount_subtotal ? session.amount_subtotal / 100 : 0,\n                time: new Date()\n            },\n            policyNo: PolicyNo,\n            refNo: CarrierReferenceNumber,\n        }\n\n\n        await redis.set(`InsurancePaymentCompleted:${user.email}:${query.id}`, JSON.stringify(res), {\n            EX: 1 * 60 * 60\n        })\n\n        if ([\"Agent\", \"User\"].includes(user.role)) {\n            await redis.del(`PoliciesRecords:${user.email}`);\n        } else {\n            await redis.del(`PoliciesRecords`);\n        }\n\n        return ServiceResponse.success(\"Successfully get payment status\", res, StatusCodes.CREATED);\n    }\n    catch (error) {\n        const errorMessage = `PaymentStatusService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while fetching payment status.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\nexport const PaymentPeriodService = async (user: UserSessionTypes, body: 'Monthly') => {\n    try {\n\n        const isExist = await redis.get(`InsuranceForm:${user.email}`);\n        const formStatus = await redis.get(`InsuranceFormStatus:${user.email}`);\n\n        if (!isExist || !formStatus) {\n            return ServiceResponse.failure(\n                \"An error occurred while creating monthly payment.\",\n                null,\n                StatusCodes.INTERNAL_SERVER_ERROR,\n            );\n        }\n\n        await redis.del(`InsuranceFormStatus:${user.email}`);\n        await redis.del(`InsuranceForm:${user.email}`);\n\n        return ServiceResponse.success(\"Successfully saved your request\", null, StatusCodes.CREATED);\n    }\n    catch (error) {\n        const errorMessage = `PaymentPeriodService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating monthly payment.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}","import { GETQuoteToken, SubmitIssueQuote } from \"@/common/api/quote\"\n\nexport const SubmitIssueQuoteForm = async (block: {\n    CarrierReferenceNumber: string,\n    ProposalNo: string,\n    DuePremium: string,\n    BusinessName: string,\n}) => {\n\n    try {\n        const [access] = await GETQuoteToken()\n        const responseValue = await SubmitIssueQuote(access?.access_token!, {\n            Amount: String(block.DuePremium),\n            ProposalNo: block.ProposalNo,\n            RefNo: block.CarrierReferenceNumber,\n            Name: block.BusinessName,\n        })\n        console.log(responseValue)\n        return responseValue\n\n    } catch (error) {\n        return [null, (error as Error).message]\n    }\n\n}\n","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { PaymentCreateService, PaymentPeriodService, PaymentStatusService } from \"./paymentService\";\nimport { z } from \"zod\";\nimport { PaymentStatusSchema } from \"./paymentModel\";\nimport { UserSessionTypes } from \"@/common/types/user\";\n\n\nclass PaymentController {\n    public create: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await PaymentCreateService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public status: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await PaymentStatusService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof PaymentStatusSchema>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public period: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await PaymentPeriodService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.body);\n        return handleServiceResponse(serviceResponse, res);\n    };\n}\n\nexport const paymentController = new PaymentController();","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { policiesController } from \"./policiesController\";\nimport { QuotedModel } from \"./policiesModel\";\n\nexport const policiesRegistry = new OpenAPIRegistry();\nexport const policiesRouter: Router = express.Router();\n\npoliciesRouter.get('/quoted', validateRequest(QuotedModel), policiesController.quoted)\npoliciesRouter.get('/blocked', validateRequest(QuotedModel), policiesController.blocked)\npoliciesRouter.get('/issued', validateRequest(QuotedModel), policiesController.issued)","import { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { logger } from \"@/server\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { z } from \"zod\";\nimport { redis } from \"@/common/config/redis\";\nimport { blockedData, filterPoliciesQuery, issuedData, policiesModel, quotedData } from \"@/common/models/mongoDB/quote\";\nimport { QuotedModel } from \"./policiesModel\";\n\n\nexport const QuotedService = async (user: UserSessionTypes, query: z.infer<typeof QuotedModel>['query']) => {\n    try {\n\n        const page = Number(query.page || \"1\");\n        const limit = 10\n\n        const name = query.name;\n        const num = query.num;\n        const effectiveAt = query.effectiveAt;\n        const createdAt = query.createdAt\n\n        const userRole = user.role === 'SuperAdmin';\n\n        const queryValue = userRole ? {\n            \"data.quote-summary\": { $exists: false },\n            \"data.block-quote\": { $exists: false }\n        } : {\n            \"meta.email\": user.email,\n            \"data.quote-summary\": { $exists: false },\n            \"data.block-quote\": { $exists: false }\n        }\n\n        const totalFilteredCountQuery = await filterPoliciesQuery(\n            queryValue,\n            'quoted',\n            {\n                name,\n                num,\n                effectiveAt,\n                createdAt\n            });\n\n\n        if (name || num || effectiveAt || createdAt) {\n\n            const totalFilteredCount = await policiesModel.countDocuments(totalFilteredCountQuery);\n\n            const totalPages = Math.ceil(totalFilteredCount / limit);\n            const all_quotes = totalPages < page ? [] : await quotedData(page, limit, totalFilteredCountQuery);\n\n            return ServiceResponse.success(`Successfully Get Quotes`, {\n                \"totalCounts\": totalFilteredCount,\n                \"totalPages\": totalPages,\n                \"currentPage\": page,\n                \"data\": all_quotes,\n            }, StatusCodes.OK);\n\n        }\n\n        const quotesExist = userRole ? await redis.get(\"Quotes:All\") : await redis.get(`Quotes:${user.email}`);\n        let quotesData = quotesExist ? JSON.parse(quotesExist) : {};\n\n        const all_pages = quotesData['totalPages'];\n        const all_data = quotesData['data'] ? quotesData['data'][page] : null;\n\n\n        if (quotesExist && all_data && all_pages >= page) {\n            return ServiceResponse.success(`Successfully Get Quotes`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": quotesData['data'][page],\n            }, StatusCodes.OK);\n        }\n\n        if (quotesExist && all_pages < page) {\n            return ServiceResponse.success(`Successfully Get Quotes`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": [],\n            }, StatusCodes.OK);\n        }\n\n        const total = await policiesModel.countDocuments(queryValue);\n        const totalPages = Math.ceil(total / limit);\n        const all_quotes = totalPages < page ? [] : await quotedData(page, limit, totalFilteredCountQuery);\n\n        quotesData['totalCounts'] = total;\n        quotesData['totalPages'] = totalPages;\n\n        if (totalPages >= page) {\n            quotesData['data'] = { ...quotesData['data'], [page]: all_quotes };\n        }\n\n        if (userRole) {\n            await redis.set(`Quotes:All`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n        } else {\n            await redis.set(`Quotes:${user.email}`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n        }\n\n        return ServiceResponse.success(`Successfully Get Quotes`, {\n            \"totalCounts\": quotesData['totalCounts'],\n            \"totalPages\": quotesData['totalPages'],\n            \"currentPage\": page,\n            \"data\": all_quotes,\n        }, StatusCodes.OK);\n\n    }\n    catch (error) {\n        const errorMessage = `QuotedService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating users.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\n\nexport const BlockedService = async (user: UserSessionTypes, query: z.infer<typeof QuotedModel>['query']) => {\n    try {\n\n        const page = Number(query.page || \"1\");\n        const limit = 10\n\n        const name = query.name;\n        const num = query.num;\n        const effectiveAt = query.effectiveAt;\n        const createdAt = query.createdAt\n\n        const userRole = user.role === 'SuperAdmin';\n\n        const queryValue = userRole ? {\n            \"data.quote-summary\": { $exists: false },\n            \"data.block-quote\": { $exists: true }\n        } : {\n            \"meta.email\": user.email,\n            \"data.quote-summary\": { $exists: false },\n            \"data.block-quote\": { $exists: true }\n        }\n        const totalFilteredCountQuery = await filterPoliciesQuery(\n            queryValue,\n            'blocked',\n            {\n                name,\n                num,\n                effectiveAt,\n                createdAt\n            });\n\n\n        if (name || num || effectiveAt || createdAt) {\n\n            const totalFilteredCount = await policiesModel.countDocuments(totalFilteredCountQuery);\n\n            const totalPages = Math.ceil(totalFilteredCount / limit);\n            const all_quotes = totalPages < page ? [] : await blockedData(page, limit, totalFilteredCountQuery);\n\n            return ServiceResponse.success(`Successfully Get Blocked Quotes`, {\n                \"totalCounts\": totalFilteredCount,\n                \"totalPages\": totalPages,\n                \"currentPage\": page,\n                \"data\": all_quotes,\n            }, StatusCodes.OK);\n\n        }\n\n        const quotesExist = userRole ? await redis.get('Block-Quotes:All') : await redis.get(`Block-Quotes:${user.email}`);\n        let quotesData = quotesExist ? JSON.parse(quotesExist) : {};\n\n        const all_pages = quotesData['totalPages'];\n        const all_data = quotesData['data'] ? quotesData['data'][page] : null;\n\n\n        if (quotesExist && all_data && all_pages >= page) {\n            return ServiceResponse.success(`Successfully Get Blocked Quotes`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": quotesData['data'][page],\n            }, StatusCodes.OK);\n        }\n\n        if (quotesExist && all_pages < page) {\n            return ServiceResponse.success(`Successfully Get Blocked Quotes`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": [],\n            }, StatusCodes.OK);\n        }\n\n        const total = await policiesModel.countDocuments(queryValue);\n        const totalPages = Math.ceil(total / limit);\n        const all_quotes = totalPages < page ? [] : await blockedData(page, limit, totalFilteredCountQuery);\n\n        quotesData['totalCounts'] = total;\n        quotesData['totalPages'] = totalPages;\n\n        if (totalPages >= page) {\n            quotesData['data'] = { ...quotesData['data'], [page]: all_quotes };\n        }\n\n\n        if (userRole) {\n            await redis.set(`Block-Quotes:All`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n        } else {\n            await redis.set(`Block-Quotes:${user.email}`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n        }\n\n        return ServiceResponse.success(`Successfully Get Blocked Quotes`, {\n            \"totalCounts\": quotesData['totalCounts'],\n            \"totalPages\": quotesData['totalPages'],\n            \"currentPage\": page,\n            \"data\": all_quotes,\n        }, StatusCodes.OK);\n\n    }\n    catch (error) {\n        const errorMessage = `BlockedService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating users.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}\n\n\nexport const IssuedService = async (user: UserSessionTypes, query: z.infer<typeof QuotedModel>['query']) => {\n    try {\n\n        const page = Number(query.page || \"1\");\n        const limit = 10\n\n        const name = query.name;\n        const num = query.num;\n        const effectiveAt = query.effectiveAt;\n        const createdAt = query.createdAt\n\n        const userRole = user.role === 'SuperAdmin';\n\n        const queryValue = userRole ? {\n            \"data.quote-summary\": { $exists: true }\n        } : {\n            \"meta.email\": user.email,\n            \"data.quote-summary\": { $exists: true },\n        }\n        const totalFilteredCountQuery = await filterPoliciesQuery(\n            queryValue, 'issued', {\n            name,\n            num,\n            effectiveAt,\n            createdAt\n        });\n\n\n        if (name || num || effectiveAt || createdAt) {\n\n            const totalFilteredCount = await policiesModel.countDocuments(totalFilteredCountQuery);\n\n            const totalPages = Math.ceil(totalFilteredCount / limit);\n            const all_quotes = totalPages < page ? [] : await issuedData(page, limit, totalFilteredCountQuery);\n\n            return ServiceResponse.success(`Successfully Get Policies`, {\n                \"totalCounts\": totalFilteredCount,\n                \"totalPages\": totalPages,\n                \"currentPage\": page,\n                \"data\": all_quotes,\n            }, StatusCodes.OK);\n\n        }\n\n        const quotesExist = userRole ? await redis.get(\"Policies:All\") : await redis.get(`Policies:${user.email}`);\n        let quotesData = quotesExist ? JSON.parse(quotesExist) : {};\n\n        const all_pages = quotesData['totalPages'];\n        const all_data = quotesData['data'] ? quotesData['data'][page] : null;\n\n\n        if (quotesExist && all_data && all_pages >= page) {\n            return ServiceResponse.success(`Successfully Get Policies`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": quotesData['data'][page],\n            }, StatusCodes.OK);\n        }\n\n        if (quotesExist && all_pages < page) {\n            return ServiceResponse.success(`Successfully Get Policies`, {\n                \"totalCounts\": quotesData['totalCounts'],\n                \"totalPages\": quotesData['totalPages'],\n                \"currentPage\": page,\n                \"data\": [],\n            }, StatusCodes.OK);\n        }\n\n        const total = await policiesModel.countDocuments(queryValue);\n        const totalPages = Math.ceil(total / limit);\n        const all_quotes = totalPages < page ? [] : await issuedData(page, limit, totalFilteredCountQuery);\n\n        quotesData['totalCounts'] = total;\n        quotesData['totalPages'] = totalPages;\n\n        if (totalPages >= page) {\n            quotesData['data'] = { ...quotesData['data'], [page]: all_quotes };\n        }\n\n        if (userRole) {\n            await redis.set(`Policies:All`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n        } else {\n            await redis.set(`Policies:${user.email}`, JSON.stringify(quotesData), {\n                EX: 30 * 24 * 60 * 60\n            });\n\n        }\n\n        return ServiceResponse.success(`Successfully Get Policies`, {\n            \"totalCounts\": quotesData['totalCounts'],\n            \"totalPages\": quotesData['totalPages'],\n            \"currentPage\": page,\n            \"data\": all_quotes,\n        }, StatusCodes.OK);\n    }\n    catch (error) {\n        const errorMessage = `IssuedService: $${(error as Error).message}`;\n        logger.error(errorMessage);\n        return ServiceResponse.failure(\n            \"An error occurred while creating users.\",\n            null,\n            StatusCodes.INTERNAL_SERVER_ERROR,\n        );\n    }\n}","import { handleServiceResponse } from \"@/common/utils/httpHandlers\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { z } from \"zod\";\nimport { UserSessionTypes } from \"@/common/types/user\";\nimport { BlockedService, IssuedService, QuotedService } from \"./policiesService\";\nimport { QuotedModel } from \"./policiesModel\";\n\n\nclass PoliciesController {\n    public quoted: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await QuotedService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof QuotedModel>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public blocked: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await BlockedService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof QuotedModel>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n    public issued: RequestHandler = async (req: Request, res: Response) => {\n        const serviceResponse = await IssuedService(JSON.parse(req.headers['x-requested-user'] as string) as UserSessionTypes, req.query as z.infer<typeof QuotedModel>['query']);\n        return handleServiceResponse(serviceResponse, res);\n    };\n}\n\nexport const policiesController = new PoliciesController();","import { AccessToken, ForgotToken, RefreshToken, SignUpToken } from \"@/common/config/jwt\";\nimport { emailQueue } from \"@/common/config/queue\";\nimport { findUser, isUserExist, updateUserPassword, createUser, getAllUsers } from \"@/common/models/mongoDB/user\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { UserSignupTypes } from \"@/common/types/user\";\nimport { logger } from \"@/server\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { expireIn } from \"@/common/utils/date\";\nimport { genSalt, hash, compare } from 'bcrypt';\nimport { z } from \"zod\";\nimport { EmployeeRegistrationSchema, getAgentsByStatus, ResetSchema, updateAdminProfile, updateAgentApprovalStatus, updateSuperAdminProfile, updateUserProfile } from \"./authModel\";\nimport { userSignupRedisRepository } from \"@/common/models/redis/user\";\nimport { redis } from \"@/common/config/redis\";\n\nconst signupCache = new Map<string, any>();\nconst forgotCache = new Map<string, any>();\nconst sessionCache = new Map<string, any>();\n\nexport const AuthSignUpService = async (req: UserSignupTypes) => {\n    try {\n        const user = await findUser(req.email);\n        if (user) {\n            return ServiceResponse.failure(\"User already exists\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const { password, ...rest } = req;\n        const token = await SignUpToken('Encrypt', { email: rest.email });\n        const salt = await genSalt(10);\n        const hashedPassword = await hash(password, salt);\n\n        const preparedData = {\n            email: req.email,  // Email is the primary identifier\n            name: req.name,\n            phone: req.phone,\n            role: req.role,\n            address: req.address,\n            ABN: req.ABN,\n            isEmailVerified: false,  // Default value\n            password: hashedPassword, // Password will be hashed\n            token: String(token),   // Token as a string\n            disabled: false, // Include the disabled flag\n        };\n        await redis.set('tests:key', 'hello world');\n\n        redis.set(`Signup:${req.email}`, JSON.stringify(preparedData), {\n            EX: 60 * 60\n        });\n\n        // const signupKey = `Signup:${req.email}`;  // Using email as the key\n\n        // await userSignupRedisRepository.save({\n        //     key: signupKey,   // Store the key for reference\n        //     email: req.email,  // Email is the primary identifier\n        //     name: req.name,\n        //     phone: req.phone,\n        //     role: req.role,\n        //     address: req.address,\n        //     ABN: req.ABN,\n        //     isEmailVerified: false,\n        //     password: hashedPassword,\n        //     token: String(token),\n        //     disabled: false, // Include the disabled flag\n        // });\n\n\n        // signupCache.set(req.email, {\n        //     ...rest,\n        //     password: hashedPassword,\n        //     token: String(token),\n        // });\n\n        emailQueue.add(\n            {\n                ...req,\n                type: \"Signup\",\n                token: String(token),\n            },\n            {\n                removeOnComplete: true,\n                attempts: 3,\n                jobId: req.email,\n            }\n        );\n\n        return ServiceResponse.success(\"Successfully sent login link to your email\", null, StatusCodes.CREATED);\n    } catch (error) {\n        logger.error(`AuthSignUpService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while signing up users.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    };\n\n}\n\nexport const AuthLoginService = async (req: { email: string, password: string }) => {\n    try {\n        const user = await findUser(req.email);\n        if (!user) {\n            return ServiceResponse.failure(\"User not found\", null, StatusCodes.NOT_FOUND);\n        }\n\n        if (user.disabled) {\n            return ServiceResponse.failure(\"Your account is disabled! Please contact support\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        if (user.role === 'Agent' && !user.isUserVerified) {\n            return ServiceResponse.failure(\"Your Agent account is not approved yet\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const isPasswordValid = await compare(req.password, user.password);\n        if (!isPasswordValid) {\n            return ServiceResponse.failure(\"Invalid Password\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const value = {\n            email: user.email,\n            name: user.name,\n            phone: user.phone,\n            role: user.role,\n            address: user.address,\n            userId: user.userId,\n            createdAt: user.createdAt,\n        };\n\n        const newAccessToken = await AccessToken('Encrypt', { email: value.email });\n        const newRefreshToken = await RefreshToken('Encrypt', { email: value.email });\n\n        const session = {\n            ...value,\n            accessToken: String(newAccessToken),\n            refreshToken: String(newRefreshToken),\n            expiresIn: expireIn(2),\n        };\n\n        sessionCache.set(req.email, session);\n\n        return ServiceResponse.success(\"Successfully logged in\", session, StatusCodes.CREATED);\n    } catch (error) {\n        logger.error(`AuthLoginService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while logging in users.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    }\n};\n\nexport const AuthLoginRefreshService = async (req: { email: string, token: string }) => {\n    try {\n        const isUserSessionExist = sessionCache.get(req.email);\n\n        if (!isUserSessionExist || isUserSessionExist.refreshToken !== req.token) {\n            return ServiceResponse.failure(\"User Doesn't Exist\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const { accessToken, refreshToken, ...user } = isUserSessionExist;\n        const newAccessToken = await AccessToken('Encrypt', { email: user.email });\n        const newRefreshToken = await RefreshToken('Encrypt', { email: user.email });\n\n        const newSession = {\n            ...user,\n            accessToken: String(newAccessToken),\n            refreshToken: String(newRefreshToken),\n            expiresIn: expireIn(2),\n        };\n\n        sessionCache.set(req.email, newSession);\n\n        return ServiceResponse.success(\"Login successfully refreshed\", newSession, StatusCodes.OK);\n    } catch (error) {\n        logger.error(`AuthLoginRefreshService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while refreshing login of users.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    }\n};\n\nexport const AuthForgotService = async (req: { email: string }) => {\n    try {\n        if (forgotCache.has(req.email)) {\n            return ServiceResponse.success(\"Forgot link already sent to you successfully\", null, StatusCodes.OK);\n        }\n\n        const user = await isUserExist(req.email);\n        if (!user) {\n            return ServiceResponse.failure(\"User not found\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const token = await ForgotToken('Encrypt', { email: req.email });\n\n        forgotCache.set(req.email, {\n            email: req.email,\n            createdAt: new Date(),\n            token: String(token),\n        });\n\n        emailQueue.add(\n            {\n                ...req,\n                name: user.name,\n                type: \"Forgot\",\n                token: String(token),\n            },\n            {\n                removeOnComplete: true,\n                attempts: 3,\n                jobId: req.email,\n            }\n        );\n\n        return ServiceResponse.success(\"Successfully sent forgot link to your email\", null, StatusCodes.CREATED);\n    } catch (error) {\n        logger.error(`AuthForgotService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while sending forgot email.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    }\n};\n\nexport const AuthResetService = async (body: z.infer<typeof ResetSchema>['body']) => {\n    try {\n        const { email, password, token } = body;\n        const forgotData = forgotCache.get(email);\n\n        if (!forgotData || forgotData.token !== token) {\n            return ServiceResponse.failure(\"Unauthorized\", null, StatusCodes.UNAUTHORIZED);\n        }\n\n        const salt = await genSalt(10);\n        const hashedPassword = await hash(password, salt);\n        await updateUserPassword(email, hashedPassword);\n        forgotCache.delete(email);\n\n        return ServiceResponse.success(\"Password Reset Successfully\", null, StatusCodes.CREATED);\n    } catch (error) {\n        logger.error(`AuthResetService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while resetting password.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    }\n\n};\n\nexport const AuthRegisterEmployeeService = async (body: z.infer<typeof EmployeeRegistrationSchema>['body']) => {\n    try {\n        const existingUser = await findUser(body.email);\n        if (existingUser) {\n            return ServiceResponse.failure(\"Employee already exists\", null, StatusCodes.CONFLICT);\n        }\n\n        const salt = await genSalt(10);\n        const hashedPassword = await hash(body.password, salt);\n\n        const userData = {\n            email: body.email,\n            name: body.name,\n            phone: body.phone,\n            address: body.address,\n            password: hashedPassword,\n            role: \"Admin\" as const, // 👈 Key fix here\n            isUserVerified: false,\n            isEmailVerified: true,\n        };\n\n\n        await createUser(userData);\n\n        return ServiceResponse.success(\"Employee registered successfully\", null, StatusCodes.CREATED);\n    } catch (error) {\n        logger.error(`AuthRegisterEmployeeService: ${(error as Error).message}`);\n        return ServiceResponse.failure(\"An error occurred while registering the employee.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n    }\n};\n\n//   // New Service for Agent Customer List API\n// export const GetAgentCustomerListService = async (agentId: string) => {\n//     try {\n//         // Query to fetch all users linked to this agent (assuming 'assignedAgent' is the field in User model)\n//         const customers = await User.find({ assignedAgent: agentId }).exec();\n\n//         if (!customers || customers.length === 0) {\n//             return { status: \"error\", message: \"No customers found for this agent.\" };\n//         }\n\n//         return { status: \"success\", customers };\n//     } catch (error) {\n//         logger.error(\"Error fetching customers for agent:\", error);\n//         return { status: \"error\", message: \"Internal server error.\" };\n//     }\n// };\n\nexport const GetAllUsersListService = async (page: number, limit: number = 10): Promise<ServiceResponse<any>> => {\n    try {\n        // Get all users with pagination\n        const users = await getAllUsers(page, limit);\n\n        // Return the service response with the required format\n        return {\n            success: true,\n            statusCode: 200,\n            // status: \"success\",\n            data: users,\n            message: \"Success\"\n        };\n    } catch (error) {\n        console.error(\"Error fetching all users:\", error);\n        return {\n            success: false,\n            statusCode: 500,\n            // status: \"error\",\n            message: \"Internal server error.\",\n            data: null\n\n        };\n    }\n};\n\nexport const AuthGetAgentsService = async (status: string = 'all') => {\n    try {\n        const validStatuses = ['approved', 'pending', 'all'];\n        const finalStatus = validStatuses.includes(status) ? status as 'approved' | 'pending' | 'all' : 'all';\n\n        const agents = await getAgentsByStatus(finalStatus);\n\n        return {\n            success: true,\n            statusCode: 200,\n            message: \"Agents fetched successfully\",\n            data: agents\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: \"Failed to fetch agents\",\n            data: null,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n};\n\n\nexport const AuthApproveAgentService = async (email: string, isUserVerified: boolean) => {\n    try {\n        const result = await updateAgentApprovalStatus(email, isUserVerified);\n\n        if (result.modifiedCount === 0) {\n            return {\n                success: false,\n                statusCode: 404,\n                message: 'Agent not found or already in desired state',\n                data: null\n            };\n        }\n\n        return {\n            success: true,\n            statusCode: 200,\n            message: `Agent ${isUserVerified ? 'approved' : 'rejected'} successfully`,\n            data: null\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: 'Failed to update agent status',\n            data: null,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n\n};\n\n\nexport const AuthUpdateProfileService = async (updateData: any) => {\n    try {\n        const { email, ...fieldsToUpdate } = updateData;\n\n        const { password, ...rest } = fieldsToUpdate;\n\n        let updatedData = { ...rest };\n\n        if (password) {\n            const salt = await genSalt(10);\n            const hashedPassword = await hash(password, salt);\n            updatedData.password = hashedPassword;\n        }\n\n        const updatedUser = await updateUserProfile(email, updatedData);\n\n        return {\n            success: true,\n            statusCode: 200,\n            message: \"User profile updated successfully\",\n            data: updatedUser\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: \"Profile update failed\",\n            data: null,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n};\n\n\nexport const AuthUpdateAgentProfileService = async (updateData: any) => {\n    try {\n        const { email, ...fieldsToUpdate } = updateData;\n\n        const { password, ...rest } = fieldsToUpdate;\n        let updatedData = { ...rest };\n\n        if (password) {\n            const salt = await genSalt(10);\n            const hashedPassword = await hash(password, salt);\n            updatedData.password = hashedPassword;\n        }\n\n        const updatedUser = await updateUserProfile(email, updatedData);\n\n        return {\n            success: true,\n            statusCode: 200,\n            message: \"Agent profile updated successfully\",\n            data: updatedUser\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: \"Agent profile update failed\",\n            data: null,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n};\n\nexport const AuthUpdateAdminProfileService = async (updateData: any) => {\n    try {\n        const { email, password, ...fieldsToUpdate } = updateData;\n\n        // Check if password exists in the request\n        if (password) {\n            const salt = await genSalt(10);\n            const hashedPassword = await hash(password, salt);\n            fieldsToUpdate.password = hashedPassword; // Update the password with the hashed one\n        }\n\n        // Update the admin profile in the database\n        const updatedAdmin = await updateAdminProfile(email, fieldsToUpdate);\n\n        return {\n            success: true,\n            statusCode: 200,\n            message: \"Admin profile updated successfully\",\n            data: updatedAdmin\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: \"Failed to update admin profile\",\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n};\n\nexport const AuthUpdateSuperAdminProfileService = async (updateData: any) => {\n    try {\n        const { email, ...fieldsToUpdate } = updateData;\n\n        const { password, ...rest } = fieldsToUpdate;\n\n        let updatedData = { ...rest };\n\n        if (password) {\n            const salt = await genSalt(10);\n            const hashedPassword = await hash(password, salt);\n            updatedData = { ...updatedData, password: hashedPassword };\n        }\n\n        // Assuming updateSuperAdminProfile is a function that updates Super Admin details in the database\n        const updatedSuperAdmin = await updateSuperAdminProfile(email, updatedData);\n        if (updatedSuperAdmin) {\n            return {\n                success: true,\n                statusCode: 200,\n                message: 'Super Admin profile updated successfully',\n                data: updatedSuperAdmin\n            };\n        }\n        return {\n            success: false,\n            statusCode: 400,\n            message: 'Only SuperAdmin details can be udpated...',\n            data: updatedSuperAdmin\n        };\n    } catch (error) {\n        return {\n            success: false,\n            statusCode: 500,\n            message: 'Failed to update Super Admin profile',\n            data: null,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n};"]}