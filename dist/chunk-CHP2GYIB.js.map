{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-CHP2GYIB.js","../src/common/config/jwt.ts"],"names":[],"mappings":"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","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-CHP2GYIB.js","sourcesContent":[null,"import { JWK, JWTPayload, jwtVerify, KeyLike, SignJWT } from 'jose'\nimport { env } from '@/common/config/env'\n\ntype JWTActionType = \"Decrypt\" | \"Encrypt\"\n\nconst {\n    ACCESS_TOKEN_SECRET,\n    REFRESH_TOKEN_SECRET,\n    SIGNUP_VERIFICATION_TOKEN_SECRET,\n    LOGIN_VERIFICATION_TOKEN_SECRET,\n    FORGOT_VERIFICATION_TOKEN_SECRET\n} = env\n\nexport const keyEncoder = (key: string) => {\n    return new TextEncoder().encode(key)\n}\n\nexport const jwtEncrypt = async (payload: JWTPayload, exp: string | number | Date, Secret: KeyLike | Uint8Array | JWK) => {\n    return await new SignJWT(payload)\n        .setProtectedHeader({ alg: 'HS256' })\n        .setIssuedAt()\n        .setExpirationTime(exp)\n        .sign(Secret)\n}\n\n\nexport async function jwtDecrypt(input: string, Secret: KeyLike | Uint8Array | JWK) {\n    const { payload } = await jwtVerify(input, Secret, {\n        algorithms: ['HS256'],\n    })\n\n    return payload\n}\n\n\nexport const SignUpToken = async (type: JWTActionType, payload: JWTPayload | string) => {\n\n    if (type === \"Decrypt\" && typeof payload === 'string') {\n        return await jwtDecrypt(payload, keyEncoder(SIGNUP_VERIFICATION_TOKEN_SECRET))\n    }\n\n    return await jwtEncrypt(payload as JWTPayload || {}, '30d', keyEncoder(SIGNUP_VERIFICATION_TOKEN_SECRET))\n\n}\n\nexport const LoginToken = async (type: JWTActionType, payload: JWTPayload | string) => {\n\n    if (type === \"Decrypt\" && typeof payload === 'string') {\n        return await jwtDecrypt(payload, keyEncoder(LOGIN_VERIFICATION_TOKEN_SECRET))\n    }\n\n    return await jwtEncrypt(payload as JWTPayload || {}, '1d', keyEncoder(LOGIN_VERIFICATION_TOKEN_SECRET))\n\n}\n\nexport const AccessToken = async (type: JWTActionType, payload: JWTPayload | string) => {\n\n    if (type === \"Decrypt\" && typeof payload === 'string') {\n        return await jwtDecrypt(payload, keyEncoder(ACCESS_TOKEN_SECRET))\n    }\n\n    return await jwtEncrypt(payload as JWTPayload || {}, '2d', keyEncoder(ACCESS_TOKEN_SECRET))\n\n}\n\nexport const RefreshToken = async (type: JWTActionType, payload: JWTPayload | string) => {\n\n    if (type === \"Decrypt\" && typeof payload === 'string') {\n        return await jwtDecrypt(payload, keyEncoder(REFRESH_TOKEN_SECRET))\n    }\n\n    return await jwtEncrypt(payload as JWTPayload || {}, '2d', keyEncoder(REFRESH_TOKEN_SECRET))\n\n}\n\n\nexport const ForgotToken = async (type: JWTActionType, payload: JWTPayload | string) => {\n\n    if (type === \"Decrypt\" && typeof payload === 'string') {\n        return await jwtDecrypt(payload, keyEncoder(FORGOT_VERIFICATION_TOKEN_SECRET))\n    }\n\n    return await jwtEncrypt(payload as JWTPayload || {}, '1d', keyEncoder(FORGOT_VERIFICATION_TOKEN_SECRET))\n\n}\n"]}