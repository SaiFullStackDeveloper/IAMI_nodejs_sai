{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-XSUWL2FG.js","../src/api/v1/auth/authModel.ts"],"names":[],"mappings":"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","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-XSUWL2FG.js","sourcesContent":[null,"import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { z } from \"zod\";\nimport parsePhoneNumberFromString from 'libphonenumber-js';\nimport { UserRolesSchema, UserTypes } from \"@/common/types/user\";\nimport { userModel } from \"@/common/models/mongoDB/user\";\n\nextendZodWithOpenApi(z);\n\n\nexport const SignUpSchema = z.object({\n    body: z.object({\n        email: z.string({ required_error: 'Email is required' }).email(\n            {\n                message: 'Invalid email address'\n            }\n        ),\n        name: z.string({ required_error: 'Name is required' }),\n        password: z.string({ required_error: 'Password is required' }).min(8, {\n            message: \"Password must be at least 8 characters\"\n        }),\n        phone: z.string({ required_error: 'Phone number is required' }).transform((arg, ctx) => {\n            const phone = parsePhoneNumberFromString(arg, {\n                // set this to use a default country when the phone number omits country code\n                defaultCountry: 'AU',\n\n                // set to false to require that the whole string is exactly a phone number,\n                // otherwise, it will search for a phone number anywhere within the string\n                extract: false,\n            });\n\n            // when it's good\n            if (phone && phone.isValid()) {\n                return phone.number;\n            }\n\n            // when it's not\n            ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: 'Invalid phone number',\n            });\n            return z.NEVER;\n        }),\n        role: UserRolesSchema.exclude(['SuperAdmin', 'Admin']),\n        address: z.string().min(10).optional(),\n        ABN: z.string().optional()\n    }).strict()\n        .superRefine((data, ctx) => {\n            if (data.role === 'Agent' && !data.address) {\n                ctx.addIssue({\n                    code: z.ZodIssueCode.custom,\n                    message: 'Address is required',\n                    path: ['address'],\n                });\n            }\n\n            if (data.role === 'User' && data.address) {\n                ctx.addIssue({\n                    code: z.ZodIssueCode.custom,\n                    message: 'Address is not required',\n                    path: ['address'],\n                });\n            }\n\n            if ((data.role === 'User') && data.ABN) {\n                ctx.addIssue({\n                    code: z.ZodIssueCode.custom,\n                    message: 'ABN is not required',\n                    path: ['ABN']\n                })\n\n            }\n\n        })\n})\n\n\nexport const LoginSchema = z.object({\n    body: z.object({\n        email: z.string({ required_error: 'Email is required' }).email(\n            {\n                message: 'Invalid email address'\n            }\n        ),\n        password: z.string({ required_error: 'Password is required' }).nonempty({\n            message: 'Password is required'\n        }).min(8, {\n            message: \"Password must be at least 8 characters\"\n        })\n    }).strict()\n})\n\nexport const LoginRefreshSchema = z.object({\n    body: z.object({\n        email: z.string({ required_error: 'Email is required' }).email(\n            {\n                message: 'Invalid email address'\n            }\n        ),\n        token: z.string().min(20)\n    }).strict()\n})\n\n\nexport const ForgotSchema = z.object({\n    body: z.object({\n        email: z.string({ required_error: 'Email is required' }).email(\n            {\n                message: 'Invalid email address'\n            }\n        )\n    }).strict()\n})\n\nexport const ResetSchema = z.object({\n    body: z.object({\n        email: z.string({ required_error: 'Email is required' }).email(\n            {\n                message: 'Invalid email address'\n            }\n        ),\n        password: z.string({ required_error: 'Password is required' }).min(8, {\n            message: \"Password must be at least 8 characters\"\n        }),\n        token: z.string().min(20)\n    }).strict()\n})\n\n//  POST: Employee Registration API, which only the Super Admin is allowed to call\n\nexport const EmployeeRegistrationSchema = z.object({\n  body: z.object({\n    name: z.string().min(2),\n    email: z.string().email(),\n    phone: z.string().min(10).max(15),\n    address: z.string(),\n    password: z.string().min(6),\n    ABN: z.string().optional()\n  }),\n});\n\nexport const getAgentsByStatus = async (status: 'approved' | 'pending' | 'all') => {\n    const filter: Record<string, any> = { role: 'Agent' };\n\n    if (status === 'approved') {\n        filter.isUserVerified = true;\n    } else if (status === 'pending') {\n        filter.isUserVerified = false;\n    }\n\n    return await userModel.find(filter, '-password -__v');\n};\n\nexport const updateAgentApprovalStatus = async (email: string, isUserVerified: boolean) => {\n    return await userModel.updateOne(\n        { email, role: 'Agent' },\n        { $set: { isUserVerified } }\n    );\n};\n\nexport const updateUserProfile = async (email: string, updateFields: Partial<UserTypes>) => {\n    const updated = await userModel.findOneAndUpdate(\n        { email },\n        { $set: updateFields },\n        { new: true, projection: '-password -__v' }\n    );\n\n    return updated;\n};\n\nexport const updateAgentProfile = async (email: string, updateFields: any) => {\n    return await userModel.findOneAndUpdate({ email }, updateFields, { new: true, projection: '-password -__v' });\n}\n\nexport const updateAdminProfile = async (email: string, fieldsToUpdate: any) => {\n    try {\n        const updatedUser = await userModel.findOneAndUpdate(\n            { email },\n            { $set: fieldsToUpdate },\n            { new: true } // Return the updated document\n        );\n\n        return updatedUser;\n    } catch (error) {\n        throw new Error('Failed to update user profile');\n    }\n};\n\n\nexport const updateSuperAdminProfile = async (email: string, updateData: any) => {\n    try {\n        const updatedSuperAdmin = await userModel.findOneAndUpdate(\n            { email: email, role: 'SuperAdmin' },\n            { $set: updateData },\n            { new: true }\n        );\n        return updatedSuperAdmin;\n    } catch (error) {\n        throw new Error('Error updating Super Admin profile');\n    }\n};"]}