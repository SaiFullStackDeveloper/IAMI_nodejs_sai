{"version":3,"sources":["/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-QIPQVNW5.js","../src/api/healthCheck/healthCheckRouter.ts"],"names":[],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;ACbA,8DAAgC;AAChC,oFAAkE;AAClE,0BAAkB;AAMlB,wFAAqB;AAGd,IAAM,oBAAA,EAAsB,IAAI,kCAAA,CAAgB,CAAA;AAChD,IAAM,kBAAA,EAA4B,iBAAA,CAAQ,MAAA,CAAO,CAAA;AAExD,mBAAA,CAAoB,YAAA,CAAa;AAAA,EAC/B,MAAA,EAAQ,KAAA;AAAA,EACR,IAAA,EAAM,eAAA;AAAA,EACN,IAAA,EAAM,CAAC,cAAc,CAAA;AAAA,EACrB,SAAA,EAAW,gDAAA,MAAkB,CAAE,IAAA,CAAK,CAAA,EAAG,SAAS;AAClD,CAAC,CAAA;AAED,iBAAA,CAAkB,GAAA,CAAI,GAAA,EAAK,MAAA,CAAO,IAAA,EAAe,GAAA,EAAA,GAAkB;AAEjE,EAAA,MAAM,gBAAA,EAAkB,gCAAA,CAAgB,OAAA,CAAQ,oBAAA,EAAsB;AAAA,IACpE,OAAA,EAAS,sBAAM,kBAAA,mBAAS,UAAA,qBAAW,EAAA,6BAAI,KAAA,mBAAM,CAAA,qBAAE,OAAA,mBAAQ,EAAE,IAAA,EAAM,EAAE,CAAC,IAAA,EAAI,YAAA,EAAc,eAAA;AAAA,IACpF,KAAA,EAAO,MAAM,sBAAA,CAAM,IAAA,CAAK,EAAA,IAAM,OAAA,EAAS,YAAA,EAAc;AAAA,EACvD,CAAC,CAAA;AACD,EAAA,OAAO,oDAAA,eAAsB,EAAiB,GAAG,CAAA;AACnD,CAAC,CAAA;ADKD;AACA;AACE;AACA;AACF,iGAAC","file":"/Users/apple/Documents/Satya/UpW/Nodejs/iami-nodejs/dist/chunk-QIPQVNW5.js","sourcesContent":[null,"import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Request, type Response, type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nimport mongoose from 'mongoose';\nimport { redis } from \"@/common/config/redis\";\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\nexport const healthCheckRouter: Router = express.Router();\n\nhealthCheckRegistry.registerPath({\n  method: \"get\",\n  path: \"/health-check\",\n  tags: [\"Health Check\"],\n  responses: createApiResponse(z.null(), \"Success\"),\n});\n\nhealthCheckRouter.get(\"/\", async (_req: Request, res: Response) => {\n\n  const serviceResponse = ServiceResponse.success(\"Service is healthy\", {\n    mongoDB: await mongoose.connection.db?.admin().command({ ping: 1 }) ? \"Connected\" : \"Not connected\",\n    redis: await redis.PING() === \"PONG\" ? \"Connected\" : \"Not connected\",\n  });\n  return handleServiceResponse(serviceResponse, res);\n});\n"]}